# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .stream_event_event import StreamEventEvent
import pydantic
from .stream_event_metadata import StreamEventMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class StreamEvent(UniversalBaseModel):
    event: typing.Optional[StreamEventEvent] = pydantic.Field(default=None)
    """
    Event type
    """

    task_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task ID
    """

    message_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique message ID
    """

    conversation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Conversation ID
    """

    workflow_run_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Workflow execution ID
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response content
    """

    audio: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice synthesis audio data (base64 encoded)
    """

    data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Event related data
    """

    metadata: typing.Optional[StreamEventMetadata] = None
    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
