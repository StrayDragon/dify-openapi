# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .process_rule_rules_pre_processing_rules_item import (
    ProcessRuleRulesPreProcessingRulesItem,
)
import pydantic
from .process_rule_rules_segmentation import ProcessRuleRulesSegmentation
from .process_rule_rules_parent_mode import ProcessRuleRulesParentMode
from .process_rule_rules_subchunk_segmentation import (
    ProcessRuleRulesSubchunkSegmentation,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ProcessRuleRules(UniversalBaseModel):
    """
    Custom rules (empty for automatic mode)
    """

    pre_processing_rules: typing.Optional[typing.List[ProcessRuleRulesPreProcessingRulesItem]] = pydantic.Field(
        default=None
    )
    """
    Pre-processing rules
    """

    segmentation: typing.Optional[ProcessRuleRulesSegmentation] = pydantic.Field(default=None)
    """
    Segmentation configuration
    """

    parent_mode: typing.Optional[ProcessRuleRulesParentMode] = pydantic.Field(default=None)
    """
    Parent segment recall mode
    """

    subchunk_segmentation: typing.Optional[ProcessRuleRulesSubchunkSegmentation] = pydantic.Field(default=None)
    """
    Sub-segment configuration
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
