# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .create_document_by_file_request_data_indexing_technique import (
    CreateDocumentByFileRequestDataIndexingTechnique,
)
from .create_document_by_file_request_data_doc_form import (
    CreateDocumentByFileRequestDataDocForm,
)
from .create_document_by_file_request_data_doc_type import (
    CreateDocumentByFileRequestDataDocType,
)
from ...types.document_metadata import DocumentMetadata
from ...types.process_rule import ProcessRule
from ...types.retrieval_model import RetrievalModel
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class CreateDocumentByFileRequestData(UniversalBaseModel):
    """
    Document configuration information in JSON string format, including the following fields:
    - original_document_id: Source document ID (optional), used for re-uploading or modifying document configuration
    - indexing_technique: Indexing technique (high_quality/economy)
    - doc_form: Document form (text_model/hierarchical_model/qa_model)
    - doc_type: Document type
    - doc_metadata: Document metadata
    - doc_language: Document language (required for Q&A mode)
    - process_rule: Processing rules
    """

    original_document_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Source document ID, used for re-uploading or modifying document configuration
    """

    indexing_technique: typing.Optional[CreateDocumentByFileRequestDataIndexingTechnique] = pydantic.Field(default=None)
    """
    Indexing technique
    """

    doc_form: typing.Optional[CreateDocumentByFileRequestDataDocForm] = pydantic.Field(default=None)
    """
    Document form
    """

    doc_type: typing.Optional[CreateDocumentByFileRequestDataDocType] = pydantic.Field(default=None)
    """
    Document type
    """

    doc_metadata: typing.Optional[DocumentMetadata] = None
    doc_language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document language (required for Q&A mode)
    """

    process_rule: typing.Optional[ProcessRule] = None
    retrieval_model: typing.Optional[RetrievalModel] = None
    embedding_model: typing.Optional[str] = pydantic.Field(default=None)
    """
    Embedding model name
    """

    embedding_model_provider: typing.Optional[str] = pydantic.Field(default=None)
    """
    Embedding model provider
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
