# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawChatClient, RawChatClient
from .types.chunk_chat_completion_response import ChunkChatCompletionResponse
from .types.configure_annotation_reply_by_app_chat_request_action import ConfigureAnnotationReplyByAppChatRequestAction
from .types.configure_annotation_reply_by_app_chat_response import ConfigureAnnotationReplyByAppChatResponse
from .types.conversation import Conversation
from .types.convert_audio_to_text_by_app_chat_response import ConvertAudioToTextByAppChatResponse
from .types.create_annotation_by_app_chat_response import CreateAnnotationByAppChatResponse
from .types.delete_annotation_by_app_chat_response import DeleteAnnotationByAppChatResponse
from .types.get_annotation_reply_status_by_app_chat_request_action import GetAnnotationReplyStatusByAppChatRequestAction
from .types.get_annotation_reply_status_by_app_chat_response import GetAnnotationReplyStatusByAppChatResponse
from .types.get_annotations_list_by_app_chat_response import GetAnnotationsListByAppChatResponse
from .types.get_app_feedbacks_by_app_chat_response import GetAppFeedbacksByAppChatResponse
from .types.get_app_meta_info_by_app_chat_response import GetAppMetaInfoByAppChatResponse
from .types.get_app_site_settings_by_app_chat_response import GetAppSiteSettingsByAppChatResponse
from .types.get_application_info_by_app_chat_response import GetApplicationInfoByAppChatResponse
from .types.get_application_parameters_by_app_chat_response import GetApplicationParametersByAppChatResponse
from .types.get_conversation_list_by_app_chat_request_sort_by import GetConversationListByAppChatRequestSortBy
from .types.get_conversation_list_by_app_chat_response import GetConversationListByAppChatResponse
from .types.get_conversation_messages_by_app_chat_response import GetConversationMessagesByAppChatResponse
from .types.get_conversation_variables_by_app_chat_response import GetConversationVariablesByAppChatResponse
from .types.get_suggested_questions_by_app_chat_response import GetSuggestedQuestionsByAppChatResponse
from .types.send_chat_message_by_app_chat_request_files_item import SendChatMessageByAppChatRequestFilesItem
from .types.send_chat_message_by_app_chat_request_response_mode import SendChatMessageByAppChatRequestResponseMode
from .types.send_message_feedback_by_app_chat_response import SendMessageFeedbackByAppChatResponse
from .types.stop_chat_response_by_app_chat_response import StopChatResponseByAppChatResponse
from .types.update_annotation_by_app_chat_response import UpdateAnnotationByAppChatResponse
from .types.uploaded_file import UploadedFile

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChatClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawChatClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawChatClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawChatClient
        """
        return self._raw_client

    def send_chat_message_by_app_chat(
        self,
        *,
        query: str,
        inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[SendChatMessageByAppChatRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        conversation_id: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[SendChatMessageByAppChatRequestFilesItem]] = OMIT,
        auto_generate_name: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[ChunkChatCompletionResponse]:
        """
        Create conversation message

        Parameters
        ----------
        query : str
            User input/question content

        inputs : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Default {}

        response_mode : typing.Optional[SendChatMessageByAppChatRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete (request may be interrupted if the process is too long)
            Note: Blocking mode is not allowed in Agent mode

        user : typing.Optional[str]
            User identifier for defining end user identity, facilitating retrieval and statistics. Defined by developer rules, must be unique within the application.

        conversation_id : typing.Optional[str]
            (Optional) Conversation ID. Required when continuing a conversation based on previous chat history, must pass the conversation_id from previous messages

        files : typing.Optional[typing.Sequence[SendChatMessageByAppChatRequestFilesItem]]
            Uploaded files

        auto_generate_name : typing.Optional[bool]
            (Optional) Whether to automatically generate title, default is true. If set to false, you can call the conversation rename interface and set auto_generate to true to generate a title asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        response = client.chat.send_chat_message_by_app_chat(query='query', )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.send_chat_message_by_app_chat(
            query=query,
            inputs=inputs,
            response_mode=response_mode,
            user=user,
            conversation_id=conversation_id,
            files=files,
            auto_generate_name=auto_generate_name,
            request_options=request_options,
        ) as r:
            yield from r.data

    def get_conversation_list_by_app_chat(
        self,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[GetConversationListByAppChatRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationListByAppChatResponse:
        """
        Get conversation list for current user

        Parameters
        ----------
        user : str
            User identifier

        last_id : typing.Optional[str]
            ID of the last record on current page

        limit : typing.Optional[int]
            Records per page

        sort_by : typing.Optional[GetConversationListByAppChatRequestSortBy]
            Sort field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationListByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_conversation_list_by_app_chat(user='user', )
        """
        _response = self._raw_client.get_conversation_list_by_app_chat(
            user=user, last_id=last_id, limit=limit, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def delete_conversation_by_app_chat(
        self, conversation_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.delete_conversation_by_app_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.delete_conversation_by_app_chat(
            conversation_id, user=user, request_options=request_options
        )
        return _response.data

    def rename_conversation_by_app_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        name: typing.Optional[str] = OMIT,
        auto_generate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Conversation:
        """
        Parameters
        ----------
        conversation_id : str

        user : str
            User identifier

        name : typing.Optional[str]
            New name

        auto_generate : typing.Optional[bool]
            Whether to automatically generate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Conversation
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.rename_conversation_by_app_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.rename_conversation_by_app_chat(
            conversation_id, user=user, name=name, auto_generate=auto_generate, request_options=request_options
        )
        return _response.data

    def get_conversation_variables_by_app_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationVariablesByAppChatResponse:
        """
        Retrieve variables from a specific conversation. This endpoint is useful for extracting structured data captured during conversations.

        Parameters
        ----------
        conversation_id : str
            ID of the conversation to retrieve variables from

        user : str
            User identifier, defined by developer rules, must be unique within the application

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, max 100, min 1

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationVariablesByAppChatResponse
            Successfully retrieved variables

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_conversation_variables_by_app_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.get_conversation_variables_by_app_chat(
            conversation_id, user=user, last_id=last_id, limit=limit, request_options=request_options
        )
        return _response.data

    def get_conversation_messages_by_app_chat(
        self,
        *,
        conversation_id: str,
        user: str,
        first_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationMessagesByAppChatResponse:
        """
        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier

        first_id : typing.Optional[str]
            First message ID

        limit : typing.Optional[int]
            Limit

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationMessagesByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_conversation_messages_by_app_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.get_conversation_messages_by_app_chat(
            conversation_id=conversation_id, user=user, first_id=first_id, limit=limit, request_options=request_options
        )
        return _response.data

    def send_message_feedback_by_app_chat(
        self,
        message_id: str,
        *,
        user: str,
        rating: typing.Optional[str] = OMIT,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppChatResponse:
        """
        End-user feedback and rating for messages, helping application developers optimize expected outputs

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by developer rules, must be unique within the application

        rating : typing.Optional[str]
            Rating: like, dislike, or null to cancel

        content : typing.Optional[str]
            Specific feedback information for the message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.send_message_feedback_by_app_chat(message_id='message_id', user='user', )
        """
        _response = self._raw_client.send_message_feedback_by_app_chat(
            message_id, user=user, rating=rating, content=content, request_options=request_options
        )
        return _response.data

    def get_app_feedbacks_by_app_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAppFeedbacksByAppChatResponse:
        """
        Get end-user feedback and likes for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number, default: 1

        limit : typing.Optional[int]
            Number of items per page, default: 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppFeedbacksByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_app_feedbacks_by_app_chat()
        """
        _response = self._raw_client.get_app_feedbacks_by_app_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_suggested_questions_by_app_chat(
        self, message_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSuggestedQuestionsByAppChatResponse:
        """
        Get suggested questions for the next round

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSuggestedQuestionsByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_suggested_questions_by_app_chat(message_id='message_id', user='user', )
        """
        _response = self._raw_client.get_suggested_questions_by_app_chat(
            message_id, user=user, request_options=request_options
        )
        return _response.data

    def upload_file_by_app_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.upload_file_by_app_chat()
        """
        _response = self._raw_client.upload_file_by_app_chat(file=file, user=user, request_options=request_options)
        return _response.data

    def get_application_info_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_application_info_by_app_chat()
        """
        _response = self._raw_client.get_application_info_by_app_chat(request_options=request_options)
        return _response.data

    def stop_chat_response_by_app_chat(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopChatResponseByAppChatResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopChatResponseByAppChatResponse
            Successfully stopped the response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.stop_chat_response_by_app_chat(task_id='task_id', user='user', )
        """
        _response = self._raw_client.stop_chat_response_by_app_chat(task_id, user=user, request_options=request_options)
        return _response.data

    def convert_audio_to_text_by_app_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConvertAudioToTextByAppChatResponse:
        """
        Convert audio to text

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertAudioToTextByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.convert_audio_to_text_by_app_chat()
        """
        _response = self._raw_client.convert_audio_to_text_by_app_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    def convert_text_to_audio_by_app_chat(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful response
        """
        with self._raw_client.convert_text_to_audio_by_app_chat(
            message_id=message_id, text=text, user=user, request_options=request_options
        ) as r:
            yield from r.data

    def get_application_parameters_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_application_parameters_by_app_chat()
        """
        _response = self._raw_client.get_application_parameters_by_app_chat(request_options=request_options)
        return _response.data

    def get_app_meta_info_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppChatResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_app_meta_info_by_app_chat()
        """
        _response = self._raw_client.get_app_meta_info_by_app_chat(request_options=request_options)
        return _response.data

    def get_app_site_settings_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppSiteSettingsByAppChatResponse:
        """
        Used to get the WebApp settings of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppSiteSettingsByAppChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_app_site_settings_by_app_chat()
        """
        _response = self._raw_client.get_app_site_settings_by_app_chat(request_options=request_options)
        return _response.data

    def get_annotations_list_by_app_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppChatResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppChatResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_annotations_list_by_app_chat()
        """
        _response = self._raw_client.get_annotations_list_by_app_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_annotation_by_app_chat(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppChatResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppChatResponse
            Successfully created annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.create_annotation_by_app_chat(question='question', answer='answer', )
        """
        _response = self._raw_client.create_annotation_by_app_chat(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def update_annotation_by_app_chat(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppChatResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppChatResponse
            Successfully updated annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.update_annotation_by_app_chat(annotation_id='annotation_id', question='question', answer='answer', )
        """
        _response = self._raw_client.update_annotation_by_app_chat(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def delete_annotation_by_app_chat(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAnnotationByAppChatResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppChatResponse
            Successfully deleted annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.delete_annotation_by_app_chat(annotation_id='annotation_id', )
        """
        _response = self._raw_client.delete_annotation_by_app_chat(annotation_id, request_options=request_options)
        return _response.data

    def configure_annotation_reply_by_app_chat(
        self,
        action: ConfigureAnnotationReplyByAppChatRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppChatResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppChatRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppChatResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.configure_annotation_reply_by_app_chat(action="enable", )
        """
        _response = self._raw_client.configure_annotation_reply_by_app_chat(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    def get_annotation_reply_status_by_app_chat(
        self,
        action: GetAnnotationReplyStatusByAppChatRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppChatResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppChatRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppChatResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.chat.get_annotation_reply_status_by_app_chat(action="enable", job_id='job_id', )
        """
        _response = self._raw_client.get_annotation_reply_status_by_app_chat(
            action, job_id, request_options=request_options
        )
        return _response.data


class AsyncChatClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawChatClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawChatClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawChatClient
        """
        return self._raw_client

    async def send_chat_message_by_app_chat(
        self,
        *,
        query: str,
        inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[SendChatMessageByAppChatRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        conversation_id: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[SendChatMessageByAppChatRequestFilesItem]] = OMIT,
        auto_generate_name: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[ChunkChatCompletionResponse]:
        """
        Create conversation message

        Parameters
        ----------
        query : str
            User input/question content

        inputs : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Default {}

        response_mode : typing.Optional[SendChatMessageByAppChatRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete (request may be interrupted if the process is too long)
            Note: Blocking mode is not allowed in Agent mode

        user : typing.Optional[str]
            User identifier for defining end user identity, facilitating retrieval and statistics. Defined by developer rules, must be unique within the application.

        conversation_id : typing.Optional[str]
            (Optional) Conversation ID. Required when continuing a conversation based on previous chat history, must pass the conversation_id from previous messages

        files : typing.Optional[typing.Sequence[SendChatMessageByAppChatRequestFilesItem]]
            Uploaded files

        auto_generate_name : typing.Optional[bool]
            (Optional) Whether to automatically generate title, default is true. If set to false, you can call the conversation rename interface and set auto_generate to true to generate a title asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            response = await client.chat.send_chat_message_by_app_chat(query='query', )
            async for chunk in response:
                yield chunk
        asyncio.run(main())
        """
        async with self._raw_client.send_chat_message_by_app_chat(
            query=query,
            inputs=inputs,
            response_mode=response_mode,
            user=user,
            conversation_id=conversation_id,
            files=files,
            auto_generate_name=auto_generate_name,
            request_options=request_options,
        ) as r:
            async for data in r.data:
                yield data

    async def get_conversation_list_by_app_chat(
        self,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[GetConversationListByAppChatRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationListByAppChatResponse:
        """
        Get conversation list for current user

        Parameters
        ----------
        user : str
            User identifier

        last_id : typing.Optional[str]
            ID of the last record on current page

        limit : typing.Optional[int]
            Records per page

        sort_by : typing.Optional[GetConversationListByAppChatRequestSortBy]
            Sort field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationListByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_conversation_list_by_app_chat(user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation_list_by_app_chat(
            user=user, last_id=last_id, limit=limit, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def delete_conversation_by_app_chat(
        self, conversation_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.delete_conversation_by_app_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_conversation_by_app_chat(
            conversation_id, user=user, request_options=request_options
        )
        return _response.data

    async def rename_conversation_by_app_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        name: typing.Optional[str] = OMIT,
        auto_generate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Conversation:
        """
        Parameters
        ----------
        conversation_id : str

        user : str
            User identifier

        name : typing.Optional[str]
            New name

        auto_generate : typing.Optional[bool]
            Whether to automatically generate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Conversation
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.rename_conversation_by_app_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.rename_conversation_by_app_chat(
            conversation_id, user=user, name=name, auto_generate=auto_generate, request_options=request_options
        )
        return _response.data

    async def get_conversation_variables_by_app_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationVariablesByAppChatResponse:
        """
        Retrieve variables from a specific conversation. This endpoint is useful for extracting structured data captured during conversations.

        Parameters
        ----------
        conversation_id : str
            ID of the conversation to retrieve variables from

        user : str
            User identifier, defined by developer rules, must be unique within the application

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, max 100, min 1

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationVariablesByAppChatResponse
            Successfully retrieved variables

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_conversation_variables_by_app_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation_variables_by_app_chat(
            conversation_id, user=user, last_id=last_id, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_conversation_messages_by_app_chat(
        self,
        *,
        conversation_id: str,
        user: str,
        first_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationMessagesByAppChatResponse:
        """
        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier

        first_id : typing.Optional[str]
            First message ID

        limit : typing.Optional[int]
            Limit

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationMessagesByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_conversation_messages_by_app_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation_messages_by_app_chat(
            conversation_id=conversation_id, user=user, first_id=first_id, limit=limit, request_options=request_options
        )
        return _response.data

    async def send_message_feedback_by_app_chat(
        self,
        message_id: str,
        *,
        user: str,
        rating: typing.Optional[str] = OMIT,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppChatResponse:
        """
        End-user feedback and rating for messages, helping application developers optimize expected outputs

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by developer rules, must be unique within the application

        rating : typing.Optional[str]
            Rating: like, dislike, or null to cancel

        content : typing.Optional[str]
            Specific feedback information for the message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.send_message_feedback_by_app_chat(message_id='message_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.send_message_feedback_by_app_chat(
            message_id, user=user, rating=rating, content=content, request_options=request_options
        )
        return _response.data

    async def get_app_feedbacks_by_app_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAppFeedbacksByAppChatResponse:
        """
        Get end-user feedback and likes for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number, default: 1

        limit : typing.Optional[int]
            Number of items per page, default: 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppFeedbacksByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_app_feedbacks_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_feedbacks_by_app_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_suggested_questions_by_app_chat(
        self, message_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSuggestedQuestionsByAppChatResponse:
        """
        Get suggested questions for the next round

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSuggestedQuestionsByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_suggested_questions_by_app_chat(message_id='message_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_suggested_questions_by_app_chat(
            message_id, user=user, request_options=request_options
        )
        return _response.data

    async def upload_file_by_app_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.upload_file_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.upload_file_by_app_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    async def get_application_info_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_application_info_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_info_by_app_chat(request_options=request_options)
        return _response.data

    async def stop_chat_response_by_app_chat(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopChatResponseByAppChatResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopChatResponseByAppChatResponse
            Successfully stopped the response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.stop_chat_response_by_app_chat(task_id='task_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.stop_chat_response_by_app_chat(
            task_id, user=user, request_options=request_options
        )
        return _response.data

    async def convert_audio_to_text_by_app_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConvertAudioToTextByAppChatResponse:
        """
        Convert audio to text

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertAudioToTextByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.convert_audio_to_text_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.convert_audio_to_text_by_app_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    async def convert_text_to_audio_by_app_chat(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful response
        """
        async with self._raw_client.convert_text_to_audio_by_app_chat(
            message_id=message_id, text=text, user=user, request_options=request_options
        ) as r:
            async for data in r.data:
                yield data

    async def get_application_parameters_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_application_parameters_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_parameters_by_app_chat(request_options=request_options)
        return _response.data

    async def get_app_meta_info_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppChatResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_app_meta_info_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_meta_info_by_app_chat(request_options=request_options)
        return _response.data

    async def get_app_site_settings_by_app_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppSiteSettingsByAppChatResponse:
        """
        Used to get the WebApp settings of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppSiteSettingsByAppChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_app_site_settings_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_site_settings_by_app_chat(request_options=request_options)
        return _response.data

    async def get_annotations_list_by_app_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppChatResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppChatResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_annotations_list_by_app_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotations_list_by_app_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_annotation_by_app_chat(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppChatResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppChatResponse
            Successfully created annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.create_annotation_by_app_chat(question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_annotation_by_app_chat(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def update_annotation_by_app_chat(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppChatResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppChatResponse
            Successfully updated annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.update_annotation_by_app_chat(annotation_id='annotation_id', question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_annotation_by_app_chat(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def delete_annotation_by_app_chat(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAnnotationByAppChatResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppChatResponse
            Successfully deleted annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.delete_annotation_by_app_chat(annotation_id='annotation_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_annotation_by_app_chat(annotation_id, request_options=request_options)
        return _response.data

    async def configure_annotation_reply_by_app_chat(
        self,
        action: ConfigureAnnotationReplyByAppChatRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppChatResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppChatRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppChatResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.configure_annotation_reply_by_app_chat(action="enable", )
        asyncio.run(main())
        """
        _response = await self._raw_client.configure_annotation_reply_by_app_chat(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    async def get_annotation_reply_status_by_app_chat(
        self,
        action: GetAnnotationReplyStatusByAppChatRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppChatResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppChatRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppChatResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.chat.get_annotation_reply_status_by_app_chat(action="enable", job_id='job_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotation_reply_status_by_app_chat(
            action, job_id, request_options=request_options
        )
        return _response.data
