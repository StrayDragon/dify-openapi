# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .chunk_chat_completion_response_event import ChunkChatCompletionResponseEvent
from .chunk_chat_completion_response_metadata import ChunkChatCompletionResponseMetadata


class ChunkChatCompletionResponse(UniversalBaseModel):
    event: typing.Optional[ChunkChatCompletionResponseEvent] = pydantic.Field(default=None)
    """
    Event type, determines the structure of the response
    """

    task_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task ID for request tracking and stopping responses (used in message, message_end, tts_message, tts_message_end, message_replace, error, workflow events)
    """

    message_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique message ID (used in message, message_end, tts_message, tts_message_end, message_replace, error events)
    """

    conversation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Conversation ID (used in message, message_end, message_replace, message_file, agent_message, agent_thought events)
    """

    workflow_run_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Workflow execution ID (used in workflow_started, node_started, node_finished, workflow_finished events)
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response content (used in message, message_replace, agent_message events)
    """

    audio: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice synthesis audio data (base64 encoded) (used in tts_message, tts_message_end events)
    """

    data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Event related data (used in workflow_started, node_started, node_finished, workflow_finished events)
    """

    metadata: typing.Optional[ChunkChatCompletionResponseMetadata] = pydantic.Field(default=None)
    """
    Metadata including usage information and retriever resources (used in message_end event)
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation timestamp (used in message, tts_message, tts_message_end, message_replace, agent_message, agent_thought events)
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique ID (used in agent_thought, message_file events)
    """

    position: typing.Optional[int] = pydantic.Field(default=None)
    """
    Position of agent_thought in the message, e.g., the first iteration has position 1 (used in agent_thought event)
    """

    thought: typing.Optional[str] = pydantic.Field(default=None)
    """
    Agent's thinking content (used in agent_thought event)
    """

    observation: typing.Optional[str] = pydantic.Field(default=None)
    """
    Return result of tool call (used in agent_thought event)
    """

    tool: typing.Optional[str] = pydantic.Field(default=None)
    """
    List of tools used, multiple tools separated by ; (used in agent_thought event)
    """

    tool_input: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tool input, JSON format string (used in agent_thought event)
    """

    message_files: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    File IDs associated with the current agent_thought (used in agent_thought event)
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    File type, currently only 'image' (used in message_file event)
    """

    belongs_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    File ownership, user or assistant (used in message_file event)
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    File access URL (used in message_file event)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
