# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ChatHistoryMessageAgentThoughtsItem(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    agent_thought ID, each Agent iteration round has a unique ID
    """

    message_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique message ID
    """

    position: typing.Optional[int] = pydantic.Field(default=None)
    """
    Position of agent_thought in the message, e.g., the first iteration has position 1
    """

    thought: typing.Optional[str] = pydantic.Field(default=None)
    """
    Agent's thinking content
    """

    observation: typing.Optional[str] = pydantic.Field(default=None)
    """
    Return result of tool call
    """

    tool: typing.Optional[str] = pydantic.Field(default=None)
    """
    List of tools used, multiple tools separated by ;
    """

    tool_input: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tool input, JSON format string (object). E.g.: {"dalle3": {"prompt": "a cute cat"}}
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation timestamp, e.g., 1705395332
    """

    message_files: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    File IDs associated with the current agent_thought
    """

    conversation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Conversation ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
