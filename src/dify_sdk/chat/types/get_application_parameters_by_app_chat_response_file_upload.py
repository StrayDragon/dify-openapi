# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .get_application_parameters_by_app_chat_response_file_upload_audio import (
    GetApplicationParametersByAppChatResponseFileUploadAudio,
)
from .get_application_parameters_by_app_chat_response_file_upload_custom import (
    GetApplicationParametersByAppChatResponseFileUploadCustom,
)
from .get_application_parameters_by_app_chat_response_file_upload_document import (
    GetApplicationParametersByAppChatResponseFileUploadDocument,
)
from .get_application_parameters_by_app_chat_response_file_upload_image import (
    GetApplicationParametersByAppChatResponseFileUploadImage,
)
from .get_application_parameters_by_app_chat_response_file_upload_video import (
    GetApplicationParametersByAppChatResponseFileUploadVideo,
)


class GetApplicationParametersByAppChatResponseFileUpload(UniversalBaseModel):
    """
    File upload configuration
    """

    document: typing.Optional[GetApplicationParametersByAppChatResponseFileUploadDocument] = pydantic.Field(
        default=None
    )
    """
    Document settings. Currently supports document types: txt, md, markdown, pdf, html, xlsx, xls, docx, csv, eml, msg, pptx, ppt, xml, epub.
    """

    image: typing.Optional[GetApplicationParametersByAppChatResponseFileUploadImage] = pydantic.Field(default=None)
    """
    Image settings. Currently supports image types: png, jpg, jpeg, webp, gif.
    """

    audio: typing.Optional[GetApplicationParametersByAppChatResponseFileUploadAudio] = pydantic.Field(default=None)
    """
    Audio settings. Currently supports audio types: mp3, m4a, wav, webm, amr.
    """

    video: typing.Optional[GetApplicationParametersByAppChatResponseFileUploadVideo] = pydantic.Field(default=None)
    """
    Video settings. Currently supports video types: mp4, mov, mpeg, mpga.
    """

    custom: typing.Optional[GetApplicationParametersByAppChatResponseFileUploadCustom] = pydantic.Field(default=None)
    """
    Custom settings
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
