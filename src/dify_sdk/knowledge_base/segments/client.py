# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawSegmentsClient, RawSegmentsClient
from .types.create_segments_request_segments_item import CreateSegmentsRequestSegmentsItem
from .types.create_segments_response import CreateSegmentsResponse
from .types.get_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_response import (
    GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
)
from .types.get_segment_detail_response import GetSegmentDetailResponse
from .types.get_segments_response import GetSegmentsResponse
from .types.patch_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_child_chunk_id_response import (
    PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
)
from .types.post_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_response import (
    PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
)
from .types.update_segment_request_segment import UpdateSegmentRequestSegment
from .types.update_segment_response import UpdateSegmentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SegmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSegmentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSegmentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSegmentsClient
        """
        return self._raw_client

    def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentsResponse:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentsResponse
            Successfully retrieved segment list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.get_segments(dataset_id='dataset_id', document_id='document_id', )
        """
        _response = self._raw_client.get_segments(
            dataset_id,
            document_id,
            keyword=keyword,
            status=status,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSegmentsResponse:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSegmentsResponse
            Successfully created segment

        Examples
        --------
        from dify import DifyApi
        from dify.knowledge_base.segments import CreateSegmentsRequestSegmentsItem
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.create_segments(dataset_id='dataset_id', document_id='document_id', segments=[CreateSegmentsRequestSegmentsItem(content='content', )], )
        """
        _response = self._raw_client.create_segments(
            dataset_id, document_id, segments=segments, request_options=request_options
        )
        return _response.data

    def query_document_child_segments(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse:
        """
        Get all child segments of a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        keyword : typing.Optional[str]
            Search keyword (optional)

        page : typing.Optional[int]
            Page number (optional, default 1)

        limit : typing.Optional[int]
            Items per page (optional, default 20, max 100)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse
            Successfully retrieved child segment list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.query_document_child_segments(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        """
        _response = self._raw_client.query_document_child_segments(
            dataset_id,
            document_id,
            segment_id,
            keyword=keyword,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def create_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse:
        """
        Add a new child segment to a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse
            Successfully created child segment

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.create_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', content='content', )
        """
        _response = self._raw_client.create_document_child_segment(
            dataset_id, document_id, segment_id, content=content, request_options=request_options
        )
        return _response.data

    def delete_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.delete_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', child_chunk_id='child_chunk_id', )
        """
        _response = self._raw_client.delete_document_child_segment(
            dataset_id, document_id, segment_id, child_chunk_id, request_options=request_options
        )
        return _response.data

    def update_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse:
        """
        Update a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse
            Successfully updated child segment

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.update_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', child_chunk_id='child_chunk_id', content='content', )
        """
        _response = self._raw_client.update_document_child_segment(
            dataset_id, document_id, segment_id, child_chunk_id, content=content, request_options=request_options
        )
        return _response.data

    def get_segment_detail(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentDetailResponse:
        """
        View the details of a specific document segment in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentDetailResponse
            Successfully retrieved segment details

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.get_segment_detail(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        """
        _response = self._raw_client.get_segment_detail(
            dataset_id, document_id, segment_id, request_options=request_options
        )
        return _response.data

    def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSegmentResponse:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSegmentResponse
            Successfully updated segment

        Examples
        --------
        from dify import DifyApi
        from dify.knowledge_base.segments import UpdateSegmentRequestSegment
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.update_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', segment=UpdateSegmentRequestSegment(), )
        """
        _response = self._raw_client.update_segment(
            dataset_id, document_id, segment_id, segment=segment, request_options=request_options
        )
        return _response.data

    def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.segments.delete_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        """
        _response = self._raw_client.delete_segment(
            dataset_id, document_id, segment_id, request_options=request_options
        )
        return _response.data


class AsyncSegmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSegmentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSegmentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSegmentsClient
        """
        return self._raw_client

    async def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentsResponse:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentsResponse
            Successfully retrieved segment list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.get_segments(dataset_id='dataset_id', document_id='document_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_segments(
            dataset_id,
            document_id,
            keyword=keyword,
            status=status,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSegmentsResponse:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSegmentsResponse
            Successfully created segment

        Examples
        --------
        from dify import AsyncDifyApi
        from dify.knowledge_base.segments import CreateSegmentsRequestSegmentsItem
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.create_segments(dataset_id='dataset_id', document_id='document_id', segments=[CreateSegmentsRequestSegmentsItem(content='content', )], )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_segments(
            dataset_id, document_id, segments=segments, request_options=request_options
        )
        return _response.data

    async def query_document_child_segments(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse:
        """
        Get all child segments of a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        keyword : typing.Optional[str]
            Search keyword (optional)

        page : typing.Optional[int]
            Page number (optional, default 1)

        limit : typing.Optional[int]
            Items per page (optional, default 20, max 100)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse
            Successfully retrieved child segment list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.query_document_child_segments(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.query_document_child_segments(
            dataset_id,
            document_id,
            segment_id,
            keyword=keyword,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def create_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse:
        """
        Add a new child segment to a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse
            Successfully created child segment

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.create_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', content='content', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_document_child_segment(
            dataset_id, document_id, segment_id, content=content, request_options=request_options
        )
        return _response.data

    async def delete_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.delete_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', child_chunk_id='child_chunk_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_document_child_segment(
            dataset_id, document_id, segment_id, child_chunk_id, request_options=request_options
        )
        return _response.data

    async def update_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse:
        """
        Update a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse
            Successfully updated child segment

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.update_document_child_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', child_chunk_id='child_chunk_id', content='content', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_document_child_segment(
            dataset_id, document_id, segment_id, child_chunk_id, content=content, request_options=request_options
        )
        return _response.data

    async def get_segment_detail(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentDetailResponse:
        """
        View the details of a specific document segment in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentDetailResponse
            Successfully retrieved segment details

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.get_segment_detail(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_segment_detail(
            dataset_id, document_id, segment_id, request_options=request_options
        )
        return _response.data

    async def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSegmentResponse:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSegmentResponse
            Successfully updated segment

        Examples
        --------
        from dify import AsyncDifyApi
        from dify.knowledge_base.segments import UpdateSegmentRequestSegment
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.update_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', segment=UpdateSegmentRequestSegment(), )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_segment(
            dataset_id, document_id, segment_id, segment=segment, request_options=request_options
        )
        return _response.data

    async def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.segments.delete_segment(dataset_id='dataset_id', document_id='document_id', segment_id='segment_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_segment(
            dataset_id, document_id, segment_id, request_options=request_options
        )
        return _response.data
