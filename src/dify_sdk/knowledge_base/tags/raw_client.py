# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..types.error import Error
from ..types.knowledge_tag import KnowledgeTag
from .types.bind_dataset_to_tag_response import BindDatasetToTagResponse
from .types.delete_knowledge_tag_response import DeleteKnowledgeTagResponse
from .types.get_dataset_tags_response import GetDatasetTagsResponse
from .types.unbind_dataset_from_tag_response import UnbindDatasetFromTagResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTagsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_knowledge_tags(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[KnowledgeTag]]:
        """
        Get all knowledge base tag list

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[KnowledgeTag]]
            Successfully retrieved tag list
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[KnowledgeTag],
                    parse_obj_as(
                        type_=typing.List[KnowledgeTag],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def create_knowledge_tag(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[KnowledgeTag]:
        """
        Create a new knowledge base tag

        Parameters
        ----------
        name : str
            Tag name, required, maximum length 50

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeTag]
            Successfully created tag
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="POST",
            json={
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeTag,
                    parse_obj_as(
                        type_=KnowledgeTag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def delete_knowledge_tag(
        self, *, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DeleteKnowledgeTagResponse]:
        """
        Delete the specified knowledge base tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteKnowledgeTagResponse]
            Successfully deleted tag
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="DELETE",
            json={
                "tag_id": tag_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteKnowledgeTagResponse,
                    parse_obj_as(
                        type_=DeleteKnowledgeTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def update_knowledge_tag(
        self, *, name: str, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[KnowledgeTag]:
        """
        Update the name of the specified knowledge base tag

        Parameters
        ----------
        name : str
            Updated tag name, required, maximum length 50

        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeTag]
            Successfully updated tag name
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="PATCH",
            json={
                "name": name,
                "tag_id": tag_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeTag,
                    parse_obj_as(
                        type_=KnowledgeTag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def bind_dataset_to_tag(
        self, *, tag_ids: typing.Sequence[str], target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[BindDatasetToTagResponse]:
        """
        Bind knowledge base to specified knowledge base tags

        Parameters
        ----------
        tag_ids : typing.Sequence[str]
            Tag ID list, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BindDatasetToTagResponse]
            Successfully bound knowledge base to tags
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags/binding",
            method="POST",
            json={
                "tag_ids": tag_ids,
                "target_id": target_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BindDatasetToTagResponse,
                    parse_obj_as(
                        type_=BindDatasetToTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def unbind_dataset_from_tag(
        self, *, tag_id: str, target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UnbindDatasetFromTagResponse]:
        """
        Remove the binding relationship between knowledge base and specified tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UnbindDatasetFromTagResponse]
            Successfully unbound knowledge base from tag
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/tags/unbinding",
            method="POST",
            json={
                "tag_id": tag_id,
                "target_id": target_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UnbindDatasetFromTagResponse,
                    parse_obj_as(
                        type_=UnbindDatasetFromTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_dataset_tags(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDatasetTagsResponse]:
        """
        Get all tags bound to the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDatasetTagsResponse]
            Successfully retrieved knowledge base bound tag list
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/tags",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDatasetTagsResponse,
                    parse_obj_as(
                        type_=GetDatasetTagsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawTagsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_knowledge_tags(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[KnowledgeTag]]:
        """
        Get all knowledge base tag list

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[KnowledgeTag]]
            Successfully retrieved tag list
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[KnowledgeTag],
                    parse_obj_as(
                        type_=typing.List[KnowledgeTag],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def create_knowledge_tag(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[KnowledgeTag]:
        """
        Create a new knowledge base tag

        Parameters
        ----------
        name : str
            Tag name, required, maximum length 50

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeTag]
            Successfully created tag
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="POST",
            json={
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeTag,
                    parse_obj_as(
                        type_=KnowledgeTag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def delete_knowledge_tag(
        self, *, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DeleteKnowledgeTagResponse]:
        """
        Delete the specified knowledge base tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteKnowledgeTagResponse]
            Successfully deleted tag
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="DELETE",
            json={
                "tag_id": tag_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteKnowledgeTagResponse,
                    parse_obj_as(
                        type_=DeleteKnowledgeTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def update_knowledge_tag(
        self, *, name: str, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[KnowledgeTag]:
        """
        Update the name of the specified knowledge base tag

        Parameters
        ----------
        name : str
            Updated tag name, required, maximum length 50

        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeTag]
            Successfully updated tag name
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags",
            method="PATCH",
            json={
                "name": name,
                "tag_id": tag_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeTag,
                    parse_obj_as(
                        type_=KnowledgeTag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def bind_dataset_to_tag(
        self, *, tag_ids: typing.Sequence[str], target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[BindDatasetToTagResponse]:
        """
        Bind knowledge base to specified knowledge base tags

        Parameters
        ----------
        tag_ids : typing.Sequence[str]
            Tag ID list, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BindDatasetToTagResponse]
            Successfully bound knowledge base to tags
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags/binding",
            method="POST",
            json={
                "tag_ids": tag_ids,
                "target_id": target_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BindDatasetToTagResponse,
                    parse_obj_as(
                        type_=BindDatasetToTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def unbind_dataset_from_tag(
        self, *, tag_id: str, target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[UnbindDatasetFromTagResponse]:
        """
        Remove the binding relationship between knowledge base and specified tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UnbindDatasetFromTagResponse]
            Successfully unbound knowledge base from tag
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/tags/unbinding",
            method="POST",
            json={
                "tag_id": tag_id,
                "target_id": target_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UnbindDatasetFromTagResponse,
                    parse_obj_as(
                        type_=UnbindDatasetFromTagResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_dataset_tags(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDatasetTagsResponse]:
        """
        Get all tags bound to the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDatasetTagsResponse]
            Successfully retrieved knowledge base bound tag list
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/tags",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDatasetTagsResponse,
                    parse_obj_as(
                        type_=GetDatasetTagsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
