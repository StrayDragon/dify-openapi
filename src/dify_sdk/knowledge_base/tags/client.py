# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ..types.knowledge_tag import KnowledgeTag
from .raw_client import AsyncRawTagsClient, RawTagsClient
from .types.bind_dataset_to_tag_response import BindDatasetToTagResponse
from .types.delete_knowledge_tag_response import DeleteKnowledgeTagResponse
from .types.get_dataset_tags_response import GetDatasetTagsResponse
from .types.unbind_dataset_from_tag_response import UnbindDatasetFromTagResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TagsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTagsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTagsClient
        """
        return self._raw_client

    def get_knowledge_tags(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[KnowledgeTag]:
        """
        Get all knowledge base tag list

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[KnowledgeTag]
            Successfully retrieved tag list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.get_knowledge_tags()
        """
        _response = self._raw_client.get_knowledge_tags(request_options=request_options)
        return _response.data

    def create_knowledge_tag(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeTag:
        """
        Create a new knowledge base tag

        Parameters
        ----------
        name : str
            Tag name, required, maximum length 50

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeTag
            Successfully created tag

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.create_knowledge_tag(name='name', )
        """
        _response = self._raw_client.create_knowledge_tag(name=name, request_options=request_options)
        return _response.data

    def delete_knowledge_tag(
        self, *, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteKnowledgeTagResponse:
        """
        Delete the specified knowledge base tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteKnowledgeTagResponse
            Successfully deleted tag

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.delete_knowledge_tag(tag_id='tag_id', )
        """
        _response = self._raw_client.delete_knowledge_tag(tag_id=tag_id, request_options=request_options)
        return _response.data

    def update_knowledge_tag(
        self, *, name: str, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeTag:
        """
        Update the name of the specified knowledge base tag

        Parameters
        ----------
        name : str
            Updated tag name, required, maximum length 50

        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeTag
            Successfully updated tag name

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.update_knowledge_tag(name='name', tag_id='tag_id', )
        """
        _response = self._raw_client.update_knowledge_tag(name=name, tag_id=tag_id, request_options=request_options)
        return _response.data

    def bind_dataset_to_tag(
        self, *, tag_ids: typing.Sequence[str], target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> BindDatasetToTagResponse:
        """
        Bind knowledge base to specified knowledge base tags

        Parameters
        ----------
        tag_ids : typing.Sequence[str]
            Tag ID list, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BindDatasetToTagResponse
            Successfully bound knowledge base to tags

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.bind_dataset_to_tag(tag_ids=['tag_ids'], target_id='target_id', )
        """
        _response = self._raw_client.bind_dataset_to_tag(
            tag_ids=tag_ids, target_id=target_id, request_options=request_options
        )
        return _response.data

    def unbind_dataset_from_tag(
        self, *, tag_id: str, target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UnbindDatasetFromTagResponse:
        """
        Remove the binding relationship between knowledge base and specified tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UnbindDatasetFromTagResponse
            Successfully unbound knowledge base from tag

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.unbind_dataset_from_tag(tag_id='tag_id', target_id='target_id', )
        """
        _response = self._raw_client.unbind_dataset_from_tag(
            tag_id=tag_id, target_id=target_id, request_options=request_options
        )
        return _response.data

    def get_dataset_tags(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDatasetTagsResponse:
        """
        Get all tags bound to the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDatasetTagsResponse
            Successfully retrieved knowledge base bound tag list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.tags.get_dataset_tags(dataset_id='dataset_id', )
        """
        _response = self._raw_client.get_dataset_tags(dataset_id, request_options=request_options)
        return _response.data


class AsyncTagsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTagsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTagsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTagsClient
        """
        return self._raw_client

    async def get_knowledge_tags(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[KnowledgeTag]:
        """
        Get all knowledge base tag list

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[KnowledgeTag]
            Successfully retrieved tag list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.get_knowledge_tags()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_knowledge_tags(request_options=request_options)
        return _response.data

    async def create_knowledge_tag(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeTag:
        """
        Create a new knowledge base tag

        Parameters
        ----------
        name : str
            Tag name, required, maximum length 50

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeTag
            Successfully created tag

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.create_knowledge_tag(name='name', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_knowledge_tag(name=name, request_options=request_options)
        return _response.data

    async def delete_knowledge_tag(
        self, *, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteKnowledgeTagResponse:
        """
        Delete the specified knowledge base tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteKnowledgeTagResponse
            Successfully deleted tag

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.delete_knowledge_tag(tag_id='tag_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_knowledge_tag(tag_id=tag_id, request_options=request_options)
        return _response.data

    async def update_knowledge_tag(
        self, *, name: str, tag_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeTag:
        """
        Update the name of the specified knowledge base tag

        Parameters
        ----------
        name : str
            Updated tag name, required, maximum length 50

        tag_id : str
            Tag ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeTag
            Successfully updated tag name

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.update_knowledge_tag(name='name', tag_id='tag_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_knowledge_tag(
            name=name, tag_id=tag_id, request_options=request_options
        )
        return _response.data

    async def bind_dataset_to_tag(
        self, *, tag_ids: typing.Sequence[str], target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> BindDatasetToTagResponse:
        """
        Bind knowledge base to specified knowledge base tags

        Parameters
        ----------
        tag_ids : typing.Sequence[str]
            Tag ID list, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BindDatasetToTagResponse
            Successfully bound knowledge base to tags

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.bind_dataset_to_tag(tag_ids=['tag_ids'], target_id='target_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.bind_dataset_to_tag(
            tag_ids=tag_ids, target_id=target_id, request_options=request_options
        )
        return _response.data

    async def unbind_dataset_from_tag(
        self, *, tag_id: str, target_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UnbindDatasetFromTagResponse:
        """
        Remove the binding relationship between knowledge base and specified tag

        Parameters
        ----------
        tag_id : str
            Tag ID, required

        target_id : str
            Knowledge Base ID, required

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UnbindDatasetFromTagResponse
            Successfully unbound knowledge base from tag

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.unbind_dataset_from_tag(tag_id='tag_id', target_id='target_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.unbind_dataset_from_tag(
            tag_id=tag_id, target_id=target_id, request_options=request_options
        )
        return _response.data

    async def get_dataset_tags(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDatasetTagsResponse:
        """
        Get all tags bound to the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDatasetTagsResponse
            Successfully retrieved knowledge base bound tag list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.tags.get_dataset_tags(dataset_id='dataset_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_dataset_tags(dataset_id, request_options=request_options)
        return _response.data
