# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .document_detail_dataset_process_rule_rules_pre_processing_rules_item import (
    DocumentDetailDatasetProcessRuleRulesPreProcessingRulesItem,
)
from .document_detail_dataset_process_rule_rules_segmentation import DocumentDetailDatasetProcessRuleRulesSegmentation
from .document_detail_dataset_process_rule_rules_subchunk_segmentation import (
    DocumentDetailDatasetProcessRuleRulesSubchunkSegmentation,
)


class DocumentDetailDatasetProcessRuleRules(UniversalBaseModel):
    """
    Rule details
    """

    pre_processing_rules: typing.Optional[typing.List[DocumentDetailDatasetProcessRuleRulesPreProcessingRulesItem]] = (
        pydantic.Field(default=None)
    )
    """
    Pre-processing rules list
    """

    segmentation: typing.Optional[DocumentDetailDatasetProcessRuleRulesSegmentation] = pydantic.Field(default=None)
    """
    Segmentation rules
    """

    parent_mode: typing.Optional[str] = pydantic.Field(default=None)
    """
    Parent mode
    """

    subchunk_segmentation: typing.Optional[DocumentDetailDatasetProcessRuleRulesSubchunkSegmentation] = pydantic.Field(
        default=None
    )
    """
    Sub-chunk segmentation
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
