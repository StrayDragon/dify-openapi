# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .document_detail_data_source_info import DocumentDetailDataSourceInfo
from .document_detail_dataset_process_rule import DocumentDetailDatasetProcessRule
from .document_detail_document_process_rule import DocumentDetailDocumentProcessRule


class DocumentDetail(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document ID
    """

    position: typing.Optional[int] = pydantic.Field(default=None)
    """
    Document position
    """

    data_source_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Data source type
    """

    data_source_info: typing.Optional[DocumentDetailDataSourceInfo] = pydantic.Field(default=None)
    """
    Data source information
    """

    dataset_process_rule_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Dataset process rule ID
    """

    dataset_process_rule: typing.Optional[DocumentDetailDatasetProcessRule] = pydantic.Field(default=None)
    """
    Dataset process rule
    """

    document_process_rule: typing.Optional[DocumentDetailDocumentProcessRule] = pydantic.Field(default=None)
    """
    Document process rule
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document name
    """

    created_from: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creation source
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creator
    """

    created_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Token count
    """

    indexing_status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Indexing status
    """

    completed_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Completion timestamp
    """

    updated_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Update timestamp
    """

    indexing_latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Indexing latency
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether enabled
    """

    disabled_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Disabled timestamp
    """

    disabled_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Disabled by
    """

    archived: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether archived
    """

    segment_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Segment count
    """

    average_segment_length: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average segment length
    """

    hit_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Hit count
    """

    display_status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Display status
    """

    doc_form: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document form
    """

    doc_language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document language
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
