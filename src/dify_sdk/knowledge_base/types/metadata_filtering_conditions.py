# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .metadata_condition import MetadataCondition
from .metadata_filtering_conditions_logical_operator import MetadataFilteringConditionsLogicalOperator


class MetadataFilteringConditions(UniversalBaseModel):
    """
    Metadata filtering conditions
    """

    logical_operator: typing.Optional[MetadataFilteringConditionsLogicalOperator] = pydantic.Field(default=None)
    """
    Logical operator
    """

    conditions: typing.Optional[typing.List[MetadataCondition]] = pydantic.Field(default=None)
    """
    List of conditions
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
