# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ... import core
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...core.request_options import RequestOptions
from ...core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.content_too_large_error import ContentTooLargeError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.unsupported_media_type_error import UnsupportedMediaTypeError
from ..types.document_detail import DocumentDetail
from ..types.error import Error
from ..types.process_rule import ProcessRule
from ..types.upload_file import UploadFile
from .types.batch_update_document_status_request_action import BatchUpdateDocumentStatusRequestAction
from .types.batch_update_document_status_response import BatchUpdateDocumentStatusResponse
from .types.create_document_by_file_response import CreateDocumentByFileResponse
from .types.create_document_by_text_request_doc_form import CreateDocumentByTextRequestDocForm
from .types.create_document_by_text_request_indexing_technique import CreateDocumentByTextRequestIndexingTechnique
from .types.create_document_by_text_response import CreateDocumentByTextResponse
from .types.get_document_detail_request_metadata import GetDocumentDetailRequestMetadata
from .types.get_document_indexing_status_response import GetDocumentIndexingStatusResponse
from .types.get_document_list_response import GetDocumentListResponse
from .types.update_document_by_file_response import UpdateDocumentByFileResponse
from .types.update_document_by_text_request_doc_form import UpdateDocumentByTextRequestDocForm
from .types.update_document_by_text_request_indexing_technique import UpdateDocumentByTextRequestIndexingTechnique
from .types.update_document_by_text_response import UpdateDocumentByTextResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDocumentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_document_by_text(
        self,
        dataset_id: str,
        *,
        name: str,
        text: str,
        indexing_technique: CreateDocumentByTextRequestIndexingTechnique,
        process_rule: ProcessRule,
        doc_form: typing.Optional[CreateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateDocumentByTextResponse]:
        """
        Create a new document from text based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        name : str
            Document name

        text : str
            Document content

        indexing_technique : CreateDocumentByTextRequestIndexingTechnique
            Indexing technique

        process_rule : ProcessRule

        doc_form : typing.Optional[CreateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateDocumentByTextResponse]
            Successfully created document
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/document/create-by-text",
            method="POST",
            json={
                "name": name,
                "text": text,
                "indexing_technique": indexing_technique,
                "doc_form": doc_form,
                "doc_language": doc_language,
                "process_rule": convert_and_respect_annotation_metadata(
                    object_=process_rule, annotation=ProcessRule, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDocumentByTextResponse,
                    parse_obj_as(
                        type_=CreateDocumentByTextResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def create_document_by_file(
        self,
        dataset_id: str,
        *,
        file: core.File,
        data: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateDocumentByFileResponse]:
        """
        Create a new document from file based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        file : core.File
            See core.File for more documentation

        data : typing.Optional[str]
            Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateDocumentByFileResponse]
            Successfully created document
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/document/create-by-file",
            method="POST",
            data={
                "data": data,
            },
            files={
                "file": file,
            },
            headers={
                # "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDocumentByFileResponse,
                    parse_obj_as(
                        type_=CreateDocumentByFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def update_document_by_text(
        self,
        dataset_id: str,
        document_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        indexing_technique: typing.Optional[UpdateDocumentByTextRequestIndexingTechnique] = OMIT,
        doc_form: typing.Optional[UpdateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UpdateDocumentByTextResponse]:
        """
        Update existing document using text

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        name : typing.Optional[str]
            Document name

        text : typing.Optional[str]
            Document content

        indexing_technique : typing.Optional[UpdateDocumentByTextRequestIndexingTechnique]
            Indexing technique

        doc_form : typing.Optional[UpdateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        process_rule : typing.Optional[ProcessRule]
            Processing rules

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UpdateDocumentByTextResponse]
            Successfully updated document
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/update-by-text",
            method="POST",
            json={
                "name": name,
                "text": text,
                "indexing_technique": indexing_technique,
                "doc_form": doc_form,
                "doc_language": doc_language,
                "process_rule": convert_and_respect_annotation_metadata(
                    object_=process_rule, annotation=ProcessRule, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateDocumentByTextResponse,
                    parse_obj_as(
                        type_=UpdateDocumentByTextResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def update_document_by_file(
        self,
        dataset_id: str,
        document_id: str,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UpdateDocumentByFileResponse]:
        """
        Update existing document using file

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            Document name

        process_rule : typing.Optional[ProcessRule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UpdateDocumentByFileResponse]
            Successfully updated document
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/update-by-file",
            method="POST",
            data={
                "name": name,
                "process_rule": process_rule.model_dump_json() if process_rule else None,
            },
            files={
                "file": file,
            },
            headers={
                # "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateDocumentByFileResponse,
                    parse_obj_as(
                        type_=UpdateDocumentByFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_document_indexing_status(
        self, dataset_id: str, batch: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDocumentIndexingStatusResponse]:
        """
        Get document processing and indexing progress status

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        batch : str
            Document batch number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDocumentIndexingStatusResponse]
            Successfully retrieved indexing status
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(batch)}/indexing-status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDocumentIndexingStatusResponse,
                    parse_obj_as(
                        type_=GetDocumentIndexingStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_document_list(
        self,
        dataset_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetDocumentListResponse]:
        """
        Get a list of all documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        keyword : typing.Optional[str]
            Search keyword

        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDocumentListResponse]
            Successfully retrieved document list
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents",
            method="GET",
            params={
                "keyword": keyword,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDocumentListResponse,
                    parse_obj_as(
                        type_=GetDocumentListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_document_detail(
        self,
        dataset_id: str,
        document_id: str,
        *,
        metadata: typing.Optional[GetDocumentDetailRequestMetadata] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DocumentDetail]:
        """
        Get document detail

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        metadata : typing.Optional[GetDocumentDetailRequestMetadata]
            metadata filter condition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DocumentDetail]
            Successfully retrieved document detail
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}",
            method="GET",
            params={
                "metadata": metadata,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DocumentDetail,
                    parse_obj_as(
                        type_=DocumentDetail,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def delete_document(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Delete specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def batch_update_document_status(
        self,
        dataset_id: str,
        action: BatchUpdateDocumentStatusRequestAction,
        *,
        document_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BatchUpdateDocumentStatusResponse]:
        """
        Batch update the status of documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        action : BatchUpdateDocumentStatusRequestAction
            Action to perform

        document_ids : typing.Sequence[str]
            List of document IDs

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BatchUpdateDocumentStatusResponse]
            Successfully updated document status
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/status/{jsonable_encoder(action)}",
            method="PATCH",
            json={
                "document_ids": document_ids,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUpdateDocumentStatusResponse,
                    parse_obj_as(
                        type_=BatchUpdateDocumentStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_upload_file(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UploadFile]:
        """
        Get upload file information of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UploadFile]
            Successfully retrieved file information
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/upload-file",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UploadFile,
                    parse_obj_as(
                        type_=UploadFile,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawDocumentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_document_by_text(
        self,
        dataset_id: str,
        *,
        name: str,
        text: str,
        indexing_technique: CreateDocumentByTextRequestIndexingTechnique,
        process_rule: ProcessRule,
        doc_form: typing.Optional[CreateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateDocumentByTextResponse]:
        """
        Create a new document from text based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        name : str
            Document name

        text : str
            Document content

        indexing_technique : CreateDocumentByTextRequestIndexingTechnique
            Indexing technique

        process_rule : ProcessRule

        doc_form : typing.Optional[CreateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateDocumentByTextResponse]
            Successfully created document
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/document/create-by-text",
            method="POST",
            json={
                "name": name,
                "text": text,
                "indexing_technique": indexing_technique,
                "doc_form": doc_form,
                "doc_language": doc_language,
                "process_rule": convert_and_respect_annotation_metadata(
                    object_=process_rule, annotation=ProcessRule, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDocumentByTextResponse,
                    parse_obj_as(
                        type_=CreateDocumentByTextResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def create_document_by_file(
        self,
        dataset_id: str,
        *,
        file: core.File,
        data: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateDocumentByFileResponse]:
        """
        Create a new document from file based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        file : core.File
            See core.File for more documentation

        data : typing.Optional[str]
            Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateDocumentByFileResponse]
            Successfully created document
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/document/create-by-file",
            method="POST",
            data={
                "data": data,
            },
            files={
                "file": file,
            },
            headers={
                # "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDocumentByFileResponse,
                    parse_obj_as(
                        type_=CreateDocumentByFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def update_document_by_text(
        self,
        dataset_id: str,
        document_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        indexing_technique: typing.Optional[UpdateDocumentByTextRequestIndexingTechnique] = OMIT,
        doc_form: typing.Optional[UpdateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UpdateDocumentByTextResponse]:
        """
        Update existing document using text

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        name : typing.Optional[str]
            Document name

        text : typing.Optional[str]
            Document content

        indexing_technique : typing.Optional[UpdateDocumentByTextRequestIndexingTechnique]
            Indexing technique

        doc_form : typing.Optional[UpdateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        process_rule : typing.Optional[ProcessRule]
            Processing rules

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UpdateDocumentByTextResponse]
            Successfully updated document
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/update-by-text",
            method="POST",
            json={
                "name": name,
                "text": text,
                "indexing_technique": indexing_technique,
                "doc_form": doc_form,
                "doc_language": doc_language,
                "process_rule": convert_and_respect_annotation_metadata(
                    object_=process_rule, annotation=ProcessRule, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateDocumentByTextResponse,
                    parse_obj_as(
                        type_=UpdateDocumentByTextResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def update_document_by_file(
        self,
        dataset_id: str,
        document_id: str,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UpdateDocumentByFileResponse]:
        """
        Update existing document using file

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            Document name

        process_rule : typing.Optional[ProcessRule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UpdateDocumentByFileResponse]
            Successfully updated document
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/update-by-file",
            method="POST",
            data={
                "name": name,
                "process_rule": process_rule.model_dump_json() if process_rule else None,
            },
            files={
                "file": file,
            },
            headers={
                # "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateDocumentByFileResponse,
                    parse_obj_as(
                        type_=UpdateDocumentByFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_document_indexing_status(
        self, dataset_id: str, batch: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDocumentIndexingStatusResponse]:
        """
        Get document processing and indexing progress status

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        batch : str
            Document batch number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDocumentIndexingStatusResponse]
            Successfully retrieved indexing status
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(batch)}/indexing-status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDocumentIndexingStatusResponse,
                    parse_obj_as(
                        type_=GetDocumentIndexingStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_document_list(
        self,
        dataset_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetDocumentListResponse]:
        """
        Get a list of all documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        keyword : typing.Optional[str]
            Search keyword

        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDocumentListResponse]
            Successfully retrieved document list
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents",
            method="GET",
            params={
                "keyword": keyword,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDocumentListResponse,
                    parse_obj_as(
                        type_=GetDocumentListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_document_detail(
        self,
        dataset_id: str,
        document_id: str,
        *,
        metadata: typing.Optional[GetDocumentDetailRequestMetadata] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DocumentDetail]:
        """
        Get document detail

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        metadata : typing.Optional[GetDocumentDetailRequestMetadata]
            metadata filter condition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DocumentDetail]
            Successfully retrieved document detail
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}",
            method="GET",
            params={
                "metadata": metadata,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DocumentDetail,
                    parse_obj_as(
                        type_=DocumentDetail,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def delete_document(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def batch_update_document_status(
        self,
        dataset_id: str,
        action: BatchUpdateDocumentStatusRequestAction,
        *,
        document_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BatchUpdateDocumentStatusResponse]:
        """
        Batch update the status of documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        action : BatchUpdateDocumentStatusRequestAction
            Action to perform

        document_ids : typing.Sequence[str]
            List of document IDs

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BatchUpdateDocumentStatusResponse]
            Successfully updated document status
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/status/{jsonable_encoder(action)}",
            method="PATCH",
            json={
                "document_ids": document_ids,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUpdateDocumentStatusResponse,
                    parse_obj_as(
                        type_=BatchUpdateDocumentStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_upload_file(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[UploadFile]:
        """
        Get upload file information of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UploadFile]
            Successfully retrieved file information
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/upload-file",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UploadFile,
                    parse_obj_as(
                        type_=UploadFile,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
