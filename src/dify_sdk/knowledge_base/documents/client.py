# This file was auto-generated by Fern from our API Definition.

import typing

from ... import core
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ..types.process_rule import ProcessRule
from ..types.upload_file import UploadFile
from .raw_client import AsyncRawDocumentsClient, RawDocumentsClient
from .types.create_document_by_file_response import CreateDocumentByFileResponse
from .types.create_document_by_text_request_doc_form import CreateDocumentByTextRequestDocForm
from .types.create_document_by_text_request_indexing_technique import CreateDocumentByTextRequestIndexingTechnique
from .types.create_document_by_text_response import CreateDocumentByTextResponse
from .types.get_document_indexing_status_response import GetDocumentIndexingStatusResponse
from .types.get_document_list_response import GetDocumentListResponse
from .types.update_document_by_file_response import UpdateDocumentByFileResponse
from .types.update_document_by_text_request_doc_form import UpdateDocumentByTextRequestDocForm
from .types.update_document_by_text_request_indexing_technique import UpdateDocumentByTextRequestIndexingTechnique
from .types.update_document_by_text_response import UpdateDocumentByTextResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocumentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDocumentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDocumentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDocumentsClient
        """
        return self._raw_client

    def create_document_by_text(
        self,
        dataset_id: str,
        *,
        name: str,
        text: str,
        indexing_technique: CreateDocumentByTextRequestIndexingTechnique,
        process_rule: ProcessRule,
        doc_form: typing.Optional[CreateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateDocumentByTextResponse:
        """
        Create a new document from text based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        name : str
            Document name

        text : str
            Document content

        indexing_technique : CreateDocumentByTextRequestIndexingTechnique
            Indexing technique

        process_rule : ProcessRule

        doc_form : typing.Optional[CreateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateDocumentByTextResponse
            Successfully created document

        Examples
        --------
        from dify import DifyApi
        from dify.knowledge_base import ProcessRule
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.create_document_by_text(dataset_id='dataset_id', name='name', text='text', indexing_technique="high_quality", process_rule=ProcessRule(mode="automatic", ), )
        """
        _response = self._raw_client.create_document_by_text(
            dataset_id,
            name=name,
            text=text,
            indexing_technique=indexing_technique,
            process_rule=process_rule,
            doc_form=doc_form,
            doc_language=doc_language,
            request_options=request_options,
        )
        return _response.data

    def create_document_by_file(
        self,
        dataset_id: str,
        *,
        file: core.File,
        data: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateDocumentByFileResponse:
        """
        Create a new document from file based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        file : core.File
            See core.File for more documentation

        data : typing.Optional[str]
            Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateDocumentByFileResponse
            Successfully created document

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.create_document_by_file(dataset_id='dataset_id', )
        """
        _response = self._raw_client.create_document_by_file(
            dataset_id, file=file, data=data, request_options=request_options
        )
        return _response.data

    def update_document_by_text(
        self,
        dataset_id: str,
        document_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        indexing_technique: typing.Optional[UpdateDocumentByTextRequestIndexingTechnique] = OMIT,
        doc_form: typing.Optional[UpdateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateDocumentByTextResponse:
        """
        Update existing document using text

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        name : typing.Optional[str]
            Document name

        text : typing.Optional[str]
            Document content

        indexing_technique : typing.Optional[UpdateDocumentByTextRequestIndexingTechnique]
            Indexing technique

        doc_form : typing.Optional[UpdateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        process_rule : typing.Optional[ProcessRule]
            Processing rules

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateDocumentByTextResponse
            Successfully updated document

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.update_document_by_text(dataset_id='dataset_id', document_id='document_id', )
        """
        _response = self._raw_client.update_document_by_text(
            dataset_id,
            document_id,
            name=name,
            text=text,
            indexing_technique=indexing_technique,
            doc_form=doc_form,
            doc_language=doc_language,
            process_rule=process_rule,
            request_options=request_options,
        )
        return _response.data

    def update_document_by_file(
        self,
        dataset_id: str,
        document_id: str,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateDocumentByFileResponse:
        """
        Update existing document using file

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            Document name

        process_rule : typing.Optional[ProcessRule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateDocumentByFileResponse
            Successfully updated document

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.update_document_by_file(dataset_id='dataset_id', document_id='document_id', )
        """
        _response = self._raw_client.update_document_by_file(
            dataset_id, document_id, file=file, name=name, process_rule=process_rule, request_options=request_options
        )
        return _response.data

    def get_document_indexing_status(
        self, dataset_id: str, batch: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDocumentIndexingStatusResponse:
        """
        Get document processing and indexing progress status

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        batch : str
            Document batch number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocumentIndexingStatusResponse
            Successfully retrieved indexing status

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.get_document_indexing_status(dataset_id='dataset_id', batch='batch', )
        """
        _response = self._raw_client.get_document_indexing_status(dataset_id, batch, request_options=request_options)
        return _response.data

    def get_document_list(
        self,
        dataset_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDocumentListResponse:
        """
        Get a list of all documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        keyword : typing.Optional[str]
            Search keyword

        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocumentListResponse
            Successfully retrieved document list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.get_document_list(dataset_id='dataset_id', )
        """
        _response = self._raw_client.get_document_list(
            dataset_id, keyword=keyword, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def delete_document(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.delete_document(dataset_id='dataset_id', document_id='document_id', )
        """
        _response = self._raw_client.delete_document(dataset_id, document_id, request_options=request_options)
        return _response.data

    def get_upload_file(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UploadFile:
        """
        Get upload file information of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadFile
            Successfully retrieved file information

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.documents.get_upload_file(dataset_id='dataset_id', document_id='document_id', )
        """
        _response = self._raw_client.get_upload_file(dataset_id, document_id, request_options=request_options)
        return _response.data


class AsyncDocumentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDocumentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDocumentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDocumentsClient
        """
        return self._raw_client

    async def create_document_by_text(
        self,
        dataset_id: str,
        *,
        name: str,
        text: str,
        indexing_technique: CreateDocumentByTextRequestIndexingTechnique,
        process_rule: ProcessRule,
        doc_form: typing.Optional[CreateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateDocumentByTextResponse:
        """
        Create a new document from text based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        name : str
            Document name

        text : str
            Document content

        indexing_technique : CreateDocumentByTextRequestIndexingTechnique
            Indexing technique

        process_rule : ProcessRule

        doc_form : typing.Optional[CreateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateDocumentByTextResponse
            Successfully created document

        Examples
        --------
        from dify import AsyncDifyApi
        from dify.knowledge_base import ProcessRule
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.create_document_by_text(dataset_id='dataset_id', name='name', text='text', indexing_technique="high_quality", process_rule=ProcessRule(mode="automatic", ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_document_by_text(
            dataset_id,
            name=name,
            text=text,
            indexing_technique=indexing_technique,
            process_rule=process_rule,
            doc_form=doc_form,
            doc_language=doc_language,
            request_options=request_options,
        )
        return _response.data

    async def create_document_by_file(
        self,
        dataset_id: str,
        *,
        file: core.File,
        data: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateDocumentByFileResponse:
        """
        Create a new document from file based on existing knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        file : core.File
            See core.File for more documentation

        data : typing.Optional[str]
            Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateDocumentByFileResponse
            Successfully created document

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.create_document_by_file(dataset_id='dataset_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_document_by_file(
            dataset_id, file=file, data=data, request_options=request_options
        )
        return _response.data

    async def update_document_by_text(
        self,
        dataset_id: str,
        document_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        indexing_technique: typing.Optional[UpdateDocumentByTextRequestIndexingTechnique] = OMIT,
        doc_form: typing.Optional[UpdateDocumentByTextRequestDocForm] = OMIT,
        doc_language: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateDocumentByTextResponse:
        """
        Update existing document using text

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        name : typing.Optional[str]
            Document name

        text : typing.Optional[str]
            Document content

        indexing_technique : typing.Optional[UpdateDocumentByTextRequestIndexingTechnique]
            Indexing technique

        doc_form : typing.Optional[UpdateDocumentByTextRequestDocForm]
            Document form

        doc_language : typing.Optional[str]
            Document language (required for Q&A mode)

        process_rule : typing.Optional[ProcessRule]
            Processing rules

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateDocumentByTextResponse
            Successfully updated document

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.update_document_by_text(dataset_id='dataset_id', document_id='document_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_document_by_text(
            dataset_id,
            document_id,
            name=name,
            text=text,
            indexing_technique=indexing_technique,
            doc_form=doc_form,
            doc_language=doc_language,
            process_rule=process_rule,
            request_options=request_options,
        )
        return _response.data

    async def update_document_by_file(
        self,
        dataset_id: str,
        document_id: str,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        process_rule: typing.Optional[ProcessRule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateDocumentByFileResponse:
        """
        Update existing document using file

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            Document name

        process_rule : typing.Optional[ProcessRule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateDocumentByFileResponse
            Successfully updated document

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.update_document_by_file(dataset_id='dataset_id', document_id='document_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_document_by_file(
            dataset_id, document_id, file=file, name=name, process_rule=process_rule, request_options=request_options
        )
        return _response.data

    async def get_document_indexing_status(
        self, dataset_id: str, batch: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDocumentIndexingStatusResponse:
        """
        Get document processing and indexing progress status

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        batch : str
            Document batch number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocumentIndexingStatusResponse
            Successfully retrieved indexing status

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.get_document_indexing_status(dataset_id='dataset_id', batch='batch', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_document_indexing_status(
            dataset_id, batch, request_options=request_options
        )
        return _response.data

    async def get_document_list(
        self,
        dataset_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDocumentListResponse:
        """
        Get a list of all documents in the specified knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        keyword : typing.Optional[str]
            Search keyword

        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocumentListResponse
            Successfully retrieved document list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.get_document_list(dataset_id='dataset_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_document_list(
            dataset_id, keyword=keyword, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def delete_document(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.delete_document(dataset_id='dataset_id', document_id='document_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_document(dataset_id, document_id, request_options=request_options)
        return _response.data

    async def get_upload_file(
        self, dataset_id: str, document_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UploadFile:
        """
        Get upload file information of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadFile
            Successfully retrieved file information

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.documents.get_upload_file(dataset_id='dataset_id', document_id='document_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_upload_file(dataset_id, document_id, request_options=request_options)
        return _response.data
