# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawMetadataClient, RawMetadataClient
from .types.create_metadata_response import CreateMetadataResponse
from .types.list_dataset_metadata_response import ListDatasetMetadataResponse
from .types.toggle_built_in_metadata_request_action import ToggleBuiltInMetadataRequestAction
from .types.update_documents_metadata_request_operation_data_item import UpdateDocumentsMetadataRequestOperationDataItem
from .types.update_metadata_response import UpdateMetadataResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetadataClient
        """
        return self._raw_client

    def list_dataset_metadata(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDatasetMetadataResponse:
        """
        Get list of all metadata fields for a knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasetMetadataResponse
            Successfully retrieved metadata list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.list_dataset_metadata(dataset_id='dataset_id', )
        """
        _response = self._raw_client.list_dataset_metadata(dataset_id, request_options=request_options)
        return _response.data

    def create_metadata(
        self, dataset_id: str, *, type: str, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateMetadataResponse:
        """
        Add a new metadata field to the knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        type : str
            Metadata type, e.g. string

        name : str
            Metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateMetadataResponse
            Successfully created metadata

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.create_metadata(dataset_id='dataset_id', type='type', name='name', )
        """
        _response = self._raw_client.create_metadata(dataset_id, type=type, name=name, request_options=request_options)
        return _response.data

    def delete_metadata(
        self, dataset_id: str, metadata_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a metadata field

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        metadata_id : str
            Metadata ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.delete_metadata(dataset_id='dataset_id', metadata_id='metadata_id', )
        """
        _response = self._raw_client.delete_metadata(dataset_id, metadata_id, request_options=request_options)
        return _response.data

    def update_metadata(
        self, dataset_id: str, metadata_id: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateMetadataResponse:
        """
        Update an existing metadata field

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        metadata_id : str
            Metadata ID

        name : str
            New metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateMetadataResponse
            Successfully updated metadata

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.update_metadata(dataset_id='dataset_id', metadata_id='metadata_id', name='name', )
        """
        _response = self._raw_client.update_metadata(
            dataset_id, metadata_id, name=name, request_options=request_options
        )
        return _response.data

    def toggle_built_in_metadata(
        self,
        dataset_id: str,
        action: ToggleBuiltInMetadataRequestAction,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Enable or disable built-in metadata fields for a knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        action : ToggleBuiltInMetadataRequestAction
            Action type, enable or disable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.toggle_built_in_metadata(dataset_id='dataset_id', action="enable", )
        """
        _response = self._raw_client.toggle_built_in_metadata(dataset_id, action, request_options=request_options)
        return _response.data

    def update_documents_metadata(
        self,
        dataset_id: str,
        *,
        operation_data: typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata for multiple documents in batch

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        operation_data : typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]
            List of document metadata operations

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        from dify.knowledge_base.metadata import UpdateDocumentsMetadataRequestOperationDataItem
        from dify.knowledge_base.metadata import UpdateDocumentsMetadataRequestOperationDataItemMetadataListItem
        client = DifyApi(token="YOUR_TOKEN", )
        client.knowledge_base.metadata.update_documents_metadata(dataset_id='dataset_id', operation_data=[UpdateDocumentsMetadataRequestOperationDataItem(document_id='document_id', metadata_list=[UpdateDocumentsMetadataRequestOperationDataItemMetadataListItem(id='id', value='value', )], )], )
        """
        _response = self._raw_client.update_documents_metadata(
            dataset_id, operation_data=operation_data, request_options=request_options
        )
        return _response.data


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetadataClient
        """
        return self._raw_client

    async def list_dataset_metadata(
        self, dataset_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDatasetMetadataResponse:
        """
        Get list of all metadata fields for a knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasetMetadataResponse
            Successfully retrieved metadata list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.list_dataset_metadata(dataset_id='dataset_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.list_dataset_metadata(dataset_id, request_options=request_options)
        return _response.data

    async def create_metadata(
        self, dataset_id: str, *, type: str, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateMetadataResponse:
        """
        Add a new metadata field to the knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        type : str
            Metadata type, e.g. string

        name : str
            Metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateMetadataResponse
            Successfully created metadata

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.create_metadata(dataset_id='dataset_id', type='type', name='name', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_metadata(
            dataset_id, type=type, name=name, request_options=request_options
        )
        return _response.data

    async def delete_metadata(
        self, dataset_id: str, metadata_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a metadata field

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        metadata_id : str
            Metadata ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.delete_metadata(dataset_id='dataset_id', metadata_id='metadata_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_metadata(dataset_id, metadata_id, request_options=request_options)
        return _response.data

    async def update_metadata(
        self, dataset_id: str, metadata_id: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateMetadataResponse:
        """
        Update an existing metadata field

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        metadata_id : str
            Metadata ID

        name : str
            New metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateMetadataResponse
            Successfully updated metadata

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.update_metadata(dataset_id='dataset_id', metadata_id='metadata_id', name='name', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_metadata(
            dataset_id, metadata_id, name=name, request_options=request_options
        )
        return _response.data

    async def toggle_built_in_metadata(
        self,
        dataset_id: str,
        action: ToggleBuiltInMetadataRequestAction,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Enable or disable built-in metadata fields for a knowledge base

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        action : ToggleBuiltInMetadataRequestAction
            Action type, enable or disable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.toggle_built_in_metadata(dataset_id='dataset_id', action="enable", )
        asyncio.run(main())
        """
        _response = await self._raw_client.toggle_built_in_metadata(dataset_id, action, request_options=request_options)
        return _response.data

    async def update_documents_metadata(
        self,
        dataset_id: str,
        *,
        operation_data: typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata for multiple documents in batch

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        operation_data : typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]
            List of document metadata operations

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        from dify.knowledge_base.metadata import UpdateDocumentsMetadataRequestOperationDataItem
        from dify.knowledge_base.metadata import UpdateDocumentsMetadataRequestOperationDataItemMetadataListItem
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.knowledge_base.metadata.update_documents_metadata(dataset_id='dataset_id', operation_data=[UpdateDocumentsMetadataRequestOperationDataItem(document_id='document_id', metadata_list=[UpdateDocumentsMetadataRequestOperationDataItemMetadataListItem(id='id', value='value', )], )], )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_documents_metadata(
            dataset_id, operation_data=operation_data, request_options=request_options
        )
        return _response.data
