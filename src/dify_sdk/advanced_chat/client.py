# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAdvancedChatClient, RawAdvancedChatClient
from .types.chunk_chat_completion_response import ChunkChatCompletionResponse
from .types.configure_annotation_reply_by_app_advanced_chat_request_action import (
    ConfigureAnnotationReplyByAppAdvancedChatRequestAction,
)
from .types.configure_annotation_reply_by_app_advanced_chat_response import (
    ConfigureAnnotationReplyByAppAdvancedChatResponse,
)
from .types.convert_audio_to_text_by_app_advanced_chat_response import ConvertAudioToTextByAppAdvancedChatResponse
from .types.create_annotation_by_app_advanced_chat_response import CreateAnnotationByAppAdvancedChatResponse
from .types.file_input import FileInput
from .types.get_annotation_reply_status_by_app_advanced_chat_request_action import (
    GetAnnotationReplyStatusByAppAdvancedChatRequestAction,
)
from .types.get_annotation_reply_status_by_app_advanced_chat_response import (
    GetAnnotationReplyStatusByAppAdvancedChatResponse,
)
from .types.get_annotations_list_by_app_advanced_chat_response import GetAnnotationsListByAppAdvancedChatResponse
from .types.get_app_feedbacks_by_app_advanced_chat_response import GetAppFeedbacksByAppAdvancedChatResponse
from .types.get_app_meta_info_by_app_advanced_chat_response import GetAppMetaInfoByAppAdvancedChatResponse
from .types.get_app_web_app_settings_by_app_advanced_chat_response import GetAppWebAppSettingsByAppAdvancedChatResponse
from .types.get_application_info_by_app_advanced_chat_response import GetApplicationInfoByAppAdvancedChatResponse
from .types.get_application_parameters_by_app_advanced_chat_response import (
    GetApplicationParametersByAppAdvancedChatResponse,
)
from .types.get_conversation_messages_by_app_advanced_chat_response import (
    GetConversationMessagesByAppAdvancedChatResponse,
)
from .types.get_conversation_variables_by_app_advanced_chat_response import (
    GetConversationVariablesByAppAdvancedChatResponse,
)
from .types.get_conversations_by_app_advanced_chat_request_sort_by import GetConversationsByAppAdvancedChatRequestSortBy
from .types.get_conversations_by_app_advanced_chat_response import GetConversationsByAppAdvancedChatResponse
from .types.get_suggested_questions_by_app_advanced_chat_response import GetSuggestedQuestionsByAppAdvancedChatResponse
from .types.rename_conversation_by_app_advanced_chat_response import RenameConversationByAppAdvancedChatResponse
from .types.send_chat_message_by_app_advanced_chat_request_response_mode import (
    SendChatMessageByAppAdvancedChatRequestResponseMode,
)
from .types.send_message_feedback_by_app_advanced_chat_response import SendMessageFeedbackByAppAdvancedChatResponse
from .types.stop_chat_response_by_app_advanced_chat_response import StopChatResponseByAppAdvancedChatResponse
from .types.update_annotation_by_app_advanced_chat_response import UpdateAnnotationByAppAdvancedChatResponse
from .types.uploaded_file import UploadedFile

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AdvancedChatClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAdvancedChatClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAdvancedChatClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAdvancedChatClient
        """
        return self._raw_client

    def send_chat_message_by_app_advanced_chat(
        self,
        *,
        query: str,
        inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[SendChatMessageByAppAdvancedChatRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        conversation_id: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        auto_generate_name: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[ChunkChatCompletionResponse]:
        """
        Create conversation message

        Parameters
        ----------
        query : str
            User input/question content

        inputs : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Variables can be file list type. If the variable is a file list type, the corresponding value should be in list format, with each element containing the following: type, transfer_method, etc.

        response_mode : typing.Optional[SendChatMessageByAppAdvancedChatRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        conversation_id : typing.Optional[str]
            Conversation ID

        files : typing.Optional[typing.Sequence[FileInput]]
            File list, suitable for combining files with text understanding to answer questions, only available when the model supports Vision capabilities.

        auto_generate_name : typing.Optional[bool]
            (Optional) Automatically generate title, default `true`. If set to `false`, you can call the conversation rename interface and set `auto_generate` to `true` to generate a title asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        response = client.advanced_chat.send_chat_message_by_app_advanced_chat(query='query', )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.send_chat_message_by_app_advanced_chat(
            query=query,
            inputs=inputs,
            response_mode=response_mode,
            user=user,
            conversation_id=conversation_id,
            files=files,
            auto_generate_name=auto_generate_name,
            request_options=request_options,
        ) as r:
            yield from r.data

    def stop_chat_response_by_app_advanced_chat(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopChatResponseByAppAdvancedChatResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopChatResponseByAppAdvancedChatResponse
            Successfully stopped the response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.stop_chat_response_by_app_advanced_chat(task_id='task_id', user='user', )
        """
        _response = self._raw_client.stop_chat_response_by_app_advanced_chat(
            task_id, user=user, request_options=request_options
        )
        return _response.data

    def upload_file_by_app_advanced_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.upload_file_by_app_advanced_chat()
        """
        _response = self._raw_client.upload_file_by_app_advanced_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    def convert_audio_to_text_by_app_advanced_chat(
        self,
        *,
        file: typing.Optional[core.File] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConvertAudioToTextByAppAdvancedChatResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertAudioToTextByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.convert_audio_to_text_by_app_advanced_chat()
        """
        _response = self._raw_client.convert_audio_to_text_by_app_advanced_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    def convert_text_to_audio_by_app_advanced_chat(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Parameters
        ----------
        message_id : typing.Optional[str]
            Message ID

        text : typing.Optional[str]
            Text to convert

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful response
        """
        with self._raw_client.convert_text_to_audio_by_app_advanced_chat(
            message_id=message_id, text=text, user=user, request_options=request_options
        ) as r:
            yield from r.data

    def get_application_info_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppAdvancedChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_application_info_by_app_advanced_chat()
        """
        _response = self._raw_client.get_application_info_by_app_advanced_chat(request_options=request_options)
        return _response.data

    def get_application_parameters_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppAdvancedChatResponse:
        """
        Used at the beginning of entering the page to get function switches, input parameter names, types and default values, etc.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_application_parameters_by_app_advanced_chat()
        """
        _response = self._raw_client.get_application_parameters_by_app_advanced_chat(request_options=request_options)
        return _response.data

    def send_message_feedback_by_app_advanced_chat(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppAdvancedChatResponse:
        """
        End user feedback on messages, likes/dislikes, to help application developers optimize output expectations.

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like, dislike, or null to remove feedback

        user : str
            User identifier, defined by the developer, must be unique within the application.

        content : typing.Optional[str]
            Specific feedback information.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.send_message_feedback_by_app_advanced_chat(message_id='message_id', rating='rating', user='user', )
        """
        _response = self._raw_client.send_message_feedback_by_app_advanced_chat(
            message_id, rating=rating, user=user, content=content, request_options=request_options
        )
        return _response.data

    def get_app_feedbacks_by_app_advanced_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAppFeedbacksByAppAdvancedChatResponse:
        """
        Get application's end user feedbacks and likes.

        Parameters
        ----------
        page : typing.Optional[int]
            (Optional) Pagination, default: 1

        limit : typing.Optional[int]
            (Optional) Items per page, default: 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppFeedbacksByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_app_feedbacks_by_app_advanced_chat()
        """
        _response = self._raw_client.get_app_feedbacks_by_app_advanced_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_suggested_questions_by_app_advanced_chat(
        self, message_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSuggestedQuestionsByAppAdvancedChatResponse:
        """
        Get a list of suggested questions for the next round.

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSuggestedQuestionsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_suggested_questions_by_app_advanced_chat(message_id='message_id', user='user', )
        """
        _response = self._raw_client.get_suggested_questions_by_app_advanced_chat(
            message_id, user=user, request_options=request_options
        )
        return _response.data

    def get_conversation_messages_by_app_advanced_chat(
        self,
        *,
        conversation_id: str,
        user: str,
        first_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationMessagesByAppAdvancedChatResponse:
        """
        Returns chat history in a scrolling load format, with the first page returning the latest `limit` messages, i.e., in reverse order.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        first_id : typing.Optional[str]
            ID of the first chat message on the current page, default null

        limit : typing.Optional[int]
            Number of chat messages to return per request, default 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationMessagesByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_conversation_messages_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.get_conversation_messages_by_app_advanced_chat(
            conversation_id=conversation_id, user=user, first_id=first_id, limit=limit, request_options=request_options
        )
        return _response.data

    def get_conversations_by_app_advanced_chat(
        self,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[GetConversationsByAppAdvancedChatRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsByAppAdvancedChatResponse:
        """
        Get the current user's conversation list, by default returns the most recent 20.

        Parameters
        ----------
        user : str
            User identifier, defined by the developer, must be unique within the application.

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, maximum 100, minimum 1.

        sort_by : typing.Optional[GetConversationsByAppAdvancedChatRequestSortBy]
            (Optional) Sort field, default -updated_at (sorted by update time in descending order)
            - Available values: created_at, -created_at, updated_at, -updated_at
            - The symbol in front of the field represents ascending or descending order, - means descending

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_conversations_by_app_advanced_chat(user='user', )
        """
        _response = self._raw_client.get_conversations_by_app_advanced_chat(
            user=user, last_id=last_id, limit=limit, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def delete_conversation_by_app_advanced_chat(
        self, conversation_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a conversation.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.delete_conversation_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.delete_conversation_by_app_advanced_chat(
            conversation_id, user=user, request_options=request_options
        )
        return _response.data

    def rename_conversation_by_app_advanced_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        name: typing.Optional[str] = OMIT,
        auto_generate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RenameConversationByAppAdvancedChatResponse:
        """
        Rename a conversation, the conversation name is used for display on clients that support multiple conversations.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        name : typing.Optional[str]
            (Optional) Name, if `auto_generate` is `true`, this parameter can be omitted.

        auto_generate : typing.Optional[bool]
            (Optional) Automatically generate title, default false.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenameConversationByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.rename_conversation_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.rename_conversation_by_app_advanced_chat(
            conversation_id, user=user, name=name, auto_generate=auto_generate, request_options=request_options
        )
        return _response.data

    def get_conversation_variables_by_app_advanced_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        variable_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationVariablesByAppAdvancedChatResponse:
        """
        Retrieve variables from a specific conversation. This endpoint is useful for extracting structured data captured during conversations.

        Parameters
        ----------
        conversation_id : str
            The conversation ID to retrieve variables from.

        user : str
            User identifier, defined by developer rules, must be unique within the application.

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, maximum 100, minimum 1.

        variable_name : typing.Optional[str]
            (Optional) Variable name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationVariablesByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_conversation_variables_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        """
        _response = self._raw_client.get_conversation_variables_by_app_advanced_chat(
            conversation_id,
            user=user,
            last_id=last_id,
            limit=limit,
            variable_name=variable_name,
            request_options=request_options,
        )
        return _response.data

    def get_app_meta_info_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppAdvancedChatResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_app_meta_info_by_app_advanced_chat()
        """
        _response = self._raw_client.get_app_meta_info_by_app_advanced_chat(request_options=request_options)
        return _response.data

    def get_app_web_app_settings_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppWebAppSettingsByAppAdvancedChatResponse:
        """
        Used to get the WebApp settings of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppWebAppSettingsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_app_web_app_settings_by_app_advanced_chat()
        """
        _response = self._raw_client.get_app_web_app_settings_by_app_advanced_chat(request_options=request_options)
        return _response.data

    def get_annotations_list_by_app_advanced_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppAdvancedChatResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppAdvancedChatResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_annotations_list_by_app_advanced_chat()
        """
        _response = self._raw_client.get_annotations_list_by_app_advanced_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_annotation_by_app_advanced_chat(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppAdvancedChatResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppAdvancedChatResponse
            Successfully created annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.create_annotation_by_app_advanced_chat(question='question', answer='answer', )
        """
        _response = self._raw_client.create_annotation_by_app_advanced_chat(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def update_annotation_by_app_advanced_chat(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppAdvancedChatResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppAdvancedChatResponse
            Successfully updated annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.update_annotation_by_app_advanced_chat(annotation_id='annotation_id', question='question', answer='answer', )
        """
        _response = self._raw_client.update_annotation_by_app_advanced_chat(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def delete_annotation_by_app_advanced_chat(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.delete_annotation_by_app_advanced_chat(annotation_id='annotation_id', )
        """
        _response = self._raw_client.delete_annotation_by_app_advanced_chat(
            annotation_id, request_options=request_options
        )
        return _response.data

    def configure_annotation_reply_by_app_advanced_chat(
        self,
        action: ConfigureAnnotationReplyByAppAdvancedChatRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppAdvancedChatResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppAdvancedChatRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppAdvancedChatResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.configure_annotation_reply_by_app_advanced_chat(action="enable", )
        """
        _response = self._raw_client.configure_annotation_reply_by_app_advanced_chat(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    def get_annotation_reply_status_by_app_advanced_chat(
        self,
        action: GetAnnotationReplyStatusByAppAdvancedChatRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppAdvancedChatResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppAdvancedChatRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppAdvancedChatResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.advanced_chat.get_annotation_reply_status_by_app_advanced_chat(action="enable", job_id='job_id', )
        """
        _response = self._raw_client.get_annotation_reply_status_by_app_advanced_chat(
            action, job_id, request_options=request_options
        )
        return _response.data


class AsyncAdvancedChatClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAdvancedChatClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAdvancedChatClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAdvancedChatClient
        """
        return self._raw_client

    async def send_chat_message_by_app_advanced_chat(
        self,
        *,
        query: str,
        inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[SendChatMessageByAppAdvancedChatRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        conversation_id: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        auto_generate_name: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[ChunkChatCompletionResponse]:
        """
        Create conversation message

        Parameters
        ----------
        query : str
            User input/question content

        inputs : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Variables can be file list type. If the variable is a file list type, the corresponding value should be in list format, with each element containing the following: type, transfer_method, etc.

        response_mode : typing.Optional[SendChatMessageByAppAdvancedChatRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        conversation_id : typing.Optional[str]
            Conversation ID

        files : typing.Optional[typing.Sequence[FileInput]]
            File list, suitable for combining files with text understanding to answer questions, only available when the model supports Vision capabilities.

        auto_generate_name : typing.Optional[bool]
            (Optional) Automatically generate title, default `true`. If set to `false`, you can call the conversation rename interface and set `auto_generate` to `true` to generate a title asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            response = await client.advanced_chat.send_chat_message_by_app_advanced_chat(query='query', )
            async for chunk in response:
                yield chunk
        asyncio.run(main())
        """
        async with self._raw_client.send_chat_message_by_app_advanced_chat(
            query=query,
            inputs=inputs,
            response_mode=response_mode,
            user=user,
            conversation_id=conversation_id,
            files=files,
            auto_generate_name=auto_generate_name,
            request_options=request_options,
        ) as r:
            async for data in r.data:
                yield data

    async def stop_chat_response_by_app_advanced_chat(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopChatResponseByAppAdvancedChatResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopChatResponseByAppAdvancedChatResponse
            Successfully stopped the response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.stop_chat_response_by_app_advanced_chat(task_id='task_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.stop_chat_response_by_app_advanced_chat(
            task_id, user=user, request_options=request_options
        )
        return _response.data

    async def upload_file_by_app_advanced_chat(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.upload_file_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.upload_file_by_app_advanced_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    async def convert_audio_to_text_by_app_advanced_chat(
        self,
        *,
        file: typing.Optional[core.File] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConvertAudioToTextByAppAdvancedChatResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertAudioToTextByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.convert_audio_to_text_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.convert_audio_to_text_by_app_advanced_chat(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    async def convert_text_to_audio_by_app_advanced_chat(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Parameters
        ----------
        message_id : typing.Optional[str]
            Message ID

        text : typing.Optional[str]
            Text to convert

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful response
        """
        async with self._raw_client.convert_text_to_audio_by_app_advanced_chat(
            message_id=message_id, text=text, user=user, request_options=request_options
        ) as r:
            async for data in r.data:
                yield data

    async def get_application_info_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppAdvancedChatResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_application_info_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_info_by_app_advanced_chat(request_options=request_options)
        return _response.data

    async def get_application_parameters_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppAdvancedChatResponse:
        """
        Used at the beginning of entering the page to get function switches, input parameter names, types and default values, etc.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_application_parameters_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_parameters_by_app_advanced_chat(
            request_options=request_options
        )
        return _response.data

    async def send_message_feedback_by_app_advanced_chat(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppAdvancedChatResponse:
        """
        End user feedback on messages, likes/dislikes, to help application developers optimize output expectations.

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like, dislike, or null to remove feedback

        user : str
            User identifier, defined by the developer, must be unique within the application.

        content : typing.Optional[str]
            Specific feedback information.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.send_message_feedback_by_app_advanced_chat(message_id='message_id', rating='rating', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.send_message_feedback_by_app_advanced_chat(
            message_id, rating=rating, user=user, content=content, request_options=request_options
        )
        return _response.data

    async def get_app_feedbacks_by_app_advanced_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAppFeedbacksByAppAdvancedChatResponse:
        """
        Get application's end user feedbacks and likes.

        Parameters
        ----------
        page : typing.Optional[int]
            (Optional) Pagination, default: 1

        limit : typing.Optional[int]
            (Optional) Items per page, default: 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppFeedbacksByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_app_feedbacks_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_feedbacks_by_app_advanced_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_suggested_questions_by_app_advanced_chat(
        self, message_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSuggestedQuestionsByAppAdvancedChatResponse:
        """
        Get a list of suggested questions for the next round.

        Parameters
        ----------
        message_id : str
            Message ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSuggestedQuestionsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_suggested_questions_by_app_advanced_chat(message_id='message_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_suggested_questions_by_app_advanced_chat(
            message_id, user=user, request_options=request_options
        )
        return _response.data

    async def get_conversation_messages_by_app_advanced_chat(
        self,
        *,
        conversation_id: str,
        user: str,
        first_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationMessagesByAppAdvancedChatResponse:
        """
        Returns chat history in a scrolling load format, with the first page returning the latest `limit` messages, i.e., in reverse order.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        first_id : typing.Optional[str]
            ID of the first chat message on the current page, default null

        limit : typing.Optional[int]
            Number of chat messages to return per request, default 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationMessagesByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_conversation_messages_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation_messages_by_app_advanced_chat(
            conversation_id=conversation_id, user=user, first_id=first_id, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_conversations_by_app_advanced_chat(
        self,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[GetConversationsByAppAdvancedChatRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsByAppAdvancedChatResponse:
        """
        Get the current user's conversation list, by default returns the most recent 20.

        Parameters
        ----------
        user : str
            User identifier, defined by the developer, must be unique within the application.

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, maximum 100, minimum 1.

        sort_by : typing.Optional[GetConversationsByAppAdvancedChatRequestSortBy]
            (Optional) Sort field, default -updated_at (sorted by update time in descending order)
            - Available values: created_at, -created_at, updated_at, -updated_at
            - The symbol in front of the field represents ascending or descending order, - means descending

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_conversations_by_app_advanced_chat(user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations_by_app_advanced_chat(
            user=user, last_id=last_id, limit=limit, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def delete_conversation_by_app_advanced_chat(
        self, conversation_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a conversation.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.delete_conversation_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_conversation_by_app_advanced_chat(
            conversation_id, user=user, request_options=request_options
        )
        return _response.data

    async def rename_conversation_by_app_advanced_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        name: typing.Optional[str] = OMIT,
        auto_generate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RenameConversationByAppAdvancedChatResponse:
        """
        Rename a conversation, the conversation name is used for display on clients that support multiple conversations.

        Parameters
        ----------
        conversation_id : str
            Conversation ID

        user : str
            User identifier, defined by the developer, must be unique within the application.

        name : typing.Optional[str]
            (Optional) Name, if `auto_generate` is `true`, this parameter can be omitted.

        auto_generate : typing.Optional[bool]
            (Optional) Automatically generate title, default false.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenameConversationByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.rename_conversation_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.rename_conversation_by_app_advanced_chat(
            conversation_id, user=user, name=name, auto_generate=auto_generate, request_options=request_options
        )
        return _response.data

    async def get_conversation_variables_by_app_advanced_chat(
        self,
        conversation_id: str,
        *,
        user: str,
        last_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        variable_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationVariablesByAppAdvancedChatResponse:
        """
        Retrieve variables from a specific conversation. This endpoint is useful for extracting structured data captured during conversations.

        Parameters
        ----------
        conversation_id : str
            The conversation ID to retrieve variables from.

        user : str
            User identifier, defined by developer rules, must be unique within the application.

        last_id : typing.Optional[str]
            (Optional) ID of the last record on the current page, default null

        limit : typing.Optional[int]
            (Optional) Number of records to return per request, default 20, maximum 100, minimum 1.

        variable_name : typing.Optional[str]
            (Optional) Variable name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationVariablesByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_conversation_variables_by_app_advanced_chat(conversation_id='conversation_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation_variables_by_app_advanced_chat(
            conversation_id,
            user=user,
            last_id=last_id,
            limit=limit,
            variable_name=variable_name,
            request_options=request_options,
        )
        return _response.data

    async def get_app_meta_info_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppAdvancedChatResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_app_meta_info_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_meta_info_by_app_advanced_chat(request_options=request_options)
        return _response.data

    async def get_app_web_app_settings_by_app_advanced_chat(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppWebAppSettingsByAppAdvancedChatResponse:
        """
        Used to get the WebApp settings of the application

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppWebAppSettingsByAppAdvancedChatResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_app_web_app_settings_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_web_app_settings_by_app_advanced_chat(
            request_options=request_options
        )
        return _response.data

    async def get_annotations_list_by_app_advanced_chat(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppAdvancedChatResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppAdvancedChatResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_annotations_list_by_app_advanced_chat()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotations_list_by_app_advanced_chat(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_annotation_by_app_advanced_chat(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppAdvancedChatResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppAdvancedChatResponse
            Successfully created annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.create_annotation_by_app_advanced_chat(question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_annotation_by_app_advanced_chat(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def update_annotation_by_app_advanced_chat(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppAdvancedChatResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppAdvancedChatResponse
            Successfully updated annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.update_annotation_by_app_advanced_chat(annotation_id='annotation_id', question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_annotation_by_app_advanced_chat(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def delete_annotation_by_app_advanced_chat(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.delete_annotation_by_app_advanced_chat(annotation_id='annotation_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_annotation_by_app_advanced_chat(
            annotation_id, request_options=request_options
        )
        return _response.data

    async def configure_annotation_reply_by_app_advanced_chat(
        self,
        action: ConfigureAnnotationReplyByAppAdvancedChatRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppAdvancedChatResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppAdvancedChatRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppAdvancedChatResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.configure_annotation_reply_by_app_advanced_chat(action="enable", )
        asyncio.run(main())
        """
        _response = await self._raw_client.configure_annotation_reply_by_app_advanced_chat(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    async def get_annotation_reply_status_by_app_advanced_chat(
        self,
        action: GetAnnotationReplyStatusByAppAdvancedChatRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppAdvancedChatResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppAdvancedChatRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppAdvancedChatResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.advanced_chat.get_annotation_reply_status_by_app_advanced_chat(action="enable", job_id='job_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotation_reply_status_by_app_advanced_chat(
            action, job_id, request_options=request_options
        )
        return _response.data
