# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .get_application_parameters_by_app_advanced_chat_response_annotation_reply import (
    GetApplicationParametersByAppAdvancedChatResponseAnnotationReply,
)
from .get_application_parameters_by_app_advanced_chat_response_file_upload import (
    GetApplicationParametersByAppAdvancedChatResponseFileUpload,
)
from .get_application_parameters_by_app_advanced_chat_response_retriever_resource import (
    GetApplicationParametersByAppAdvancedChatResponseRetrieverResource,
)
from .get_application_parameters_by_app_advanced_chat_response_speech_to_text import (
    GetApplicationParametersByAppAdvancedChatResponseSpeechToText,
)
from .get_application_parameters_by_app_advanced_chat_response_suggested_questions_after_answer import (
    GetApplicationParametersByAppAdvancedChatResponseSuggestedQuestionsAfterAnswer,
)
from .get_application_parameters_by_app_advanced_chat_response_system_parameters import (
    GetApplicationParametersByAppAdvancedChatResponseSystemParameters,
)
from .get_application_parameters_by_app_advanced_chat_response_text_to_speech import (
    GetApplicationParametersByAppAdvancedChatResponseTextToSpeech,
)


class GetApplicationParametersByAppAdvancedChatResponse(UniversalBaseModel):
    opening_statement: typing.Optional[str] = pydantic.Field(default=None)
    """
    Opening statement
    """

    suggested_questions: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Opening recommended question list
    """

    suggested_questions_after_answer: typing.Optional[
        GetApplicationParametersByAppAdvancedChatResponseSuggestedQuestionsAfterAnswer
    ] = pydantic.Field(default=None)
    """
    Enable recommended questions after answer
    """

    speech_to_text: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseSpeechToText] = pydantic.Field(
        default=None
    )
    """
    Speech to text
    """

    text_to_speech: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseTextToSpeech] = pydantic.Field(
        default=None
    )
    """
    Text to speech
    """

    retriever_resource: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseRetrieverResource] = (
        pydantic.Field(default=None)
    )
    """
    Citation and attribution
    """

    annotation_reply: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseAnnotationReply] = (
        pydantic.Field(default=None)
    )
    """
    Annotation reply
    """

    user_input_form: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(
        default=None
    )
    """
    User input form configuration
    """

    file_upload: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseFileUpload] = pydantic.Field(
        default=None
    )
    """
    File upload configuration
    """

    system_parameters: typing.Optional[GetApplicationParametersByAppAdvancedChatResponseSystemParameters] = (
        pydantic.Field(default=None)
    )
    """
    System parameters
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
