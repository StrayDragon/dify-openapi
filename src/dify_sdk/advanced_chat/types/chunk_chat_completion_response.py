# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .chunk_chat_completion_response_event import ChunkChatCompletionResponseEvent
from .chunk_chat_completion_response_metadata import ChunkChatCompletionResponseMetadata


class ChunkChatCompletionResponse(UniversalBaseModel):
    event: typing.Optional[ChunkChatCompletionResponseEvent] = pydantic.Field(default=None)
    """
    Event type
    """

    task_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task ID for request tracking and stopping responses
    """

    message_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique message ID
    """

    conversation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Conversation ID
    """

    workflow_run_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Workflow execution ID
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    LLM text chunk content (for message event) or replacement content (for message_replace event)
    """

    audio: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice synthesis audio data (base64 encoded, for tts_message event)
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique file ID (for message_file event)
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    File type, currently only 'image' (for message_file event)
    """

    belongs_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    File ownership, 'user' or 'assistant' (for message_file event)
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    File access URL (for message_file event)
    """

    metadata: typing.Optional[ChunkChatCompletionResponseMetadata] = pydantic.Field(default=None)
    """
    Metadata (for message_end event)
    """

    data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Detailed content (for workflow_started, node_started, node_finished, workflow_finished events)
    """

    status: typing.Optional[int] = pydantic.Field(default=None)
    """
    HTTP status code (for error event) or execution status (data.status in node_finished, workflow_finished events)
    """

    code: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error code (for error event)
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message (for error event)
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
