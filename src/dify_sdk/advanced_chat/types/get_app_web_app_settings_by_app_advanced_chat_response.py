# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .get_app_web_app_settings_by_app_advanced_chat_response_icon_type import (
    GetAppWebAppSettingsByAppAdvancedChatResponseIconType,
)


class GetAppWebAppSettingsByAppAdvancedChatResponse(UniversalBaseModel):
    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    WebApp name
    """

    chat_color_theme: typing.Optional[str] = pydantic.Field(default=None)
    """
    Chat color theme, hex format
    """

    chat_color_theme_inverted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the chat color theme is inverted
    """

    icon_type: typing.Optional[GetAppWebAppSettingsByAppAdvancedChatResponseIconType] = pydantic.Field(default=None)
    """
    Icon type, `emoji` or `image`
    """

    icon: typing.Optional[str] = pydantic.Field(default=None)
    """
    Icon, if type is `emoji`, this is an emoji character, if type is `image`, this is an image URL
    """

    icon_background: typing.Optional[str] = pydantic.Field(default=None)
    """
    Background color in hex format
    """

    icon_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Icon URL
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description
    """

    copyright: typing.Optional[str] = pydantic.Field(default=None)
    """
    Copyright information
    """

    privacy_policy: typing.Optional[str] = pydantic.Field(default=None)
    """
    Privacy policy link
    """

    custom_disclaimer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Custom disclaimer
    """

    default_language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Default language
    """

    show_workflow_steps: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to show workflow details
    """

    use_icon_as_answer_icon: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to use the WebApp icon to replace the ðŸ¤– in chat
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
