# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .file_input_transfer_method import FileInputTransferMethod
from .file_input_type import FileInputType


class FileInput(UniversalBaseModel):
    type: typing.Optional[FileInputType] = pydantic.Field(default=None)
    """
    File type, supported types:
    - `document` Specific types include: 'TXT', 'MD', 'MARKDOWN', 'PDF', 'HTML', 'XLSX', 'XLS', 'DOCX', 'CSV', 'EML', 'MSG', 'PPTX', 'PPT', 'XML', 'EPUB'
    - `image` Specific types include: 'JPG', 'JPEG', 'PNG', 'GIF', 'WEBP', 'SVG'
    - `audio` Specific types include: 'MP3', 'M4A', 'WAV', 'WEBM', 'AMR'
    - `video` Specific types include: 'MP4', 'MOV', 'MPEG', 'MPGA'
    - `custom` Specific types include: other file types
    """

    transfer_method: typing.Optional[FileInputTransferMethod] = pydantic.Field(default=None)
    """
    Transfer method, `remote_url` image address / `local_file` uploaded file
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Remote URL (only when the transfer method is `remote_url`)
    """

    upload_file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Upload file ID (only when the transfer method is `local_file`)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
