# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class GetAppSiteResponse(UniversalBaseModel):
    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    WebApp name
    """

    icon_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Icon type, `emoji`-emoji, `image`-image
    """

    icon: typing.Optional[str] = pydantic.Field(default=None)
    """
    Icon, if the type is `emoji`, it's an emoji symbol, if the type is `image`, it's an image URL
    """

    icon_background: typing.Optional[str] = pydantic.Field(default=None)
    """
    Background color in hex format
    """

    icon_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Icon URL
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description
    """

    copyright: typing.Optional[str] = pydantic.Field(default=None)
    """
    Copyright information
    """

    privacy_policy: typing.Optional[str] = pydantic.Field(default=None)
    """
    Privacy policy link
    """

    custom_disclaimer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Custom disclaimer
    """

    default_language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Default language
    """

    show_workflow_steps: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to show workflow details
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
