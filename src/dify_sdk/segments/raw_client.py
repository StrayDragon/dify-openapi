# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..types.error import Error
from .types.create_segments_request_segments_item import CreateSegmentsRequestSegmentsItem
from .types.create_segments_response import CreateSegmentsResponse
from .types.delete_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_child_chunk_id_response import (
    DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
)
from .types.delete_segment_response import DeleteSegmentResponse
from .types.get_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_response import (
    GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
)
from .types.get_segments_response import GetSegmentsResponse
from .types.patch_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_child_chunk_id_response import (
    PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
)
from .types.post_datasets_dataset_id_documents_document_id_segments_segment_id_child_chunks_response import (
    PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
)
from .types.update_segment_request_segment import UpdateSegmentRequestSegment
from .types.update_segment_response import UpdateSegmentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSegmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetSegmentsResponse]:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetSegmentsResponse]
            Successfully retrieved segment list
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="GET",
            params={
                "keyword": keyword,
                "status": status,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetSegmentsResponse,
                    parse_obj_as(
                        type_=GetSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateSegmentsResponse]:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateSegmentsResponse]
            Successfully created segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="POST",
            json={
                "segments": convert_and_respect_annotation_metadata(
                    object_=segments, annotation=typing.Sequence[CreateSegmentsRequestSegmentsItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateSegmentsResponse,
                    parse_obj_as(
                        type_=CreateSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def query_document_child_segments(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]:
        """
        Get all child segments of a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        keyword : typing.Optional[str]
            Search keyword (optional)

        page : typing.Optional[int]
            Page number (optional, default 1)

        limit : typing.Optional[int]
            Items per page (optional, default 20, max 100)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]
            Successfully retrieved child segment list
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks",
            method="GET",
            params={
                "keyword": keyword,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
                    parse_obj_as(
                        type_=GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]:
        """
        Add a new child segment to a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]
            Successfully created child segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks",
            method="POST",
            json={
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
                    parse_obj_as(
                        type_=PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]:
        """
        Delete a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]
            Successfully deleted child segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks/{jsonable_encoder(child_chunk_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
                    parse_obj_as(
                        type_=DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]:
        """
        Update a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]
            Successfully updated child segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks/{jsonable_encoder(child_chunk_id)}",
            method="PATCH",
            json={
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
                    parse_obj_as(
                        type_=PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UpdateSegmentResponse]:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UpdateSegmentResponse]
            Successfully updated segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="POST",
            json={
                "segment": convert_and_respect_annotation_metadata(
                    object_=segment, annotation=UpdateSegmentRequestSegment, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateSegmentResponse,
                    parse_obj_as(
                        type_=UpdateSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DeleteSegmentResponse]:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteSegmentResponse]
            Successfully deleted segment
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteSegmentResponse,
                    parse_obj_as(
                        type_=DeleteSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawSegmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetSegmentsResponse]:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetSegmentsResponse]
            Successfully retrieved segment list
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="GET",
            params={
                "keyword": keyword,
                "status": status,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetSegmentsResponse,
                    parse_obj_as(
                        type_=GetSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateSegmentsResponse]:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateSegmentsResponse]
            Successfully created segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="POST",
            json={
                "segments": convert_and_respect_annotation_metadata(
                    object_=segments, annotation=typing.Sequence[CreateSegmentsRequestSegmentsItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateSegmentsResponse,
                    parse_obj_as(
                        type_=CreateSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def query_document_child_segments(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        keyword: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]:
        """
        Get all child segments of a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        keyword : typing.Optional[str]
            Search keyword (optional)

        page : typing.Optional[int]
            Page number (optional, default 1)

        limit : typing.Optional[int]
            Items per page (optional, default 20, max 100)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]
            Successfully retrieved child segment list
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks",
            method="GET",
            params={
                "keyword": keyword,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
                    parse_obj_as(
                        type_=GetDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]:
        """
        Add a new child segment to a specified segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse]
            Successfully created child segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks",
            method="POST",
            json={
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,
                    parse_obj_as(
                        type_=PostDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]:
        """
        Delete a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]
            Successfully deleted child segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks/{jsonable_encoder(child_chunk_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
                    parse_obj_as(
                        type_=DeleteDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_document_child_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        child_chunk_id: str,
        *,
        content: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]:
        """
        Update a specified document child segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        child_chunk_id : str
            Child Segment ID

        content : str
            Child segment content

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse]
            Successfully updated child segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}/child_chunks/{jsonable_encoder(child_chunk_id)}",
            method="PATCH",
            json={
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,
                    parse_obj_as(
                        type_=PatchDatasetsDatasetIdDocumentsDocumentIdSegmentsSegmentIdChildChunksChildChunkIdResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UpdateSegmentResponse]:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UpdateSegmentResponse]
            Successfully updated segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="POST",
            json={
                "segment": convert_and_respect_annotation_metadata(
                    object_=segment, annotation=UpdateSegmentRequestSegment, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpdateSegmentResponse,
                    parse_obj_as(
                        type_=UpdateSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DeleteSegmentResponse]:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteSegmentResponse]
            Successfully deleted segment
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteSegmentResponse,
                    parse_obj_as(
                        type_=DeleteSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
