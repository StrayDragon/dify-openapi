# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.get_segments_response import GetSegmentsResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.error import Error
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.create_segments_request_segments_item import (
    CreateSegmentsRequestSegmentsItem,
)
from .types.create_segments_response import CreateSegmentsResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.forbidden_error import ForbiddenError
from .types.update_segment_request_segment import UpdateSegmentRequestSegment
from .types.update_segment_response import UpdateSegmentResponse
from .types.delete_segment_response import DeleteSegmentResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SegmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentsResponse:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentsResponse
            Successfully retrieved segment list

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.segments.get_segments(
            dataset_id="dataset_id",
            document_id="document_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="GET",
            params={
                "keyword": keyword,
                "status": status,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSegmentsResponse,
                    parse_obj_as(
                        type_=GetSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSegmentsResponse:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSegmentsResponse
            Successfully created segment

        Examples
        --------
        from dify import DifyApi
        from dify.segments import CreateSegmentsRequestSegmentsItem

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.segments.create_segments(
            dataset_id="dataset_id",
            document_id="document_id",
            segments=[
                CreateSegmentsRequestSegmentsItem(
                    content="content",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="POST",
            json={
                "segments": convert_and_respect_annotation_metadata(
                    object_=segments,
                    annotation=typing.Sequence[CreateSegmentsRequestSegmentsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateSegmentsResponse,
                    parse_obj_as(
                        type_=CreateSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSegmentResponse:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSegmentResponse
            Successfully updated segment

        Examples
        --------
        from dify import DifyApi
        from dify.segments import UpdateSegmentRequestSegment

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.segments.update_segment(
            dataset_id="dataset_id",
            document_id="document_id",
            segment_id="segment_id",
            segment=UpdateSegmentRequestSegment(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="POST",
            json={
                "segment": convert_and_respect_annotation_metadata(
                    object_=segment,
                    annotation=UpdateSegmentRequestSegment,
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSegmentResponse,
                    parse_obj_as(
                        type_=UpdateSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteSegmentResponse:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSegmentResponse
            Successfully deleted segment

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.segments.delete_segment(
            dataset_id="dataset_id",
            document_id="document_id",
            segment_id="segment_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteSegmentResponse,
                    parse_obj_as(
                        type_=DeleteSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSegmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        keyword: typing.Optional[str] = None,
        status: typing.Optional[typing.Literal["completed"]] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSegmentsResponse:
        """
        Get all segments of specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        keyword : typing.Optional[str]
            Search keyword

        status : typing.Optional[typing.Literal["completed"]]
            Segment status

        page : typing.Optional[int]
            Page numbers

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSegmentsResponse
            Successfully retrieved segment list

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.segments.get_segments(
                dataset_id="dataset_id",
                document_id="document_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="GET",
            params={
                "keyword": keyword,
                "status": status,
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSegmentsResponse,
                    parse_obj_as(
                        type_=GetSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_segments(
        self,
        dataset_id: str,
        document_id: str,
        *,
        segments: typing.Sequence[CreateSegmentsRequestSegmentsItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSegmentsResponse:
        """
        Add a new segment to specified document

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segments : typing.Sequence[CreateSegmentsRequestSegmentsItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSegmentsResponse
            Successfully created segment

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi
        from dify.segments import CreateSegmentsRequestSegmentsItem

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.segments.create_segments(
                dataset_id="dataset_id",
                document_id="document_id",
                segments=[
                    CreateSegmentsRequestSegmentsItem(
                        content="content",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments",
            method="POST",
            json={
                "segments": convert_and_respect_annotation_metadata(
                    object_=segments,
                    annotation=typing.Sequence[CreateSegmentsRequestSegmentsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateSegmentsResponse,
                    parse_obj_as(
                        type_=CreateSegmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        segment: UpdateSegmentRequestSegment,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSegmentResponse:
        """
        Update specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        segment : UpdateSegmentRequestSegment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSegmentResponse
            Successfully updated segment

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi
        from dify.segments import UpdateSegmentRequestSegment

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.segments.update_segment(
                dataset_id="dataset_id",
                document_id="document_id",
                segment_id="segment_id",
                segment=UpdateSegmentRequestSegment(),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="POST",
            json={
                "segment": convert_and_respect_annotation_metadata(
                    object_=segment,
                    annotation=UpdateSegmentRequestSegment,
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSegmentResponse,
                    parse_obj_as(
                        type_=UpdateSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_segment(
        self,
        dataset_id: str,
        document_id: str,
        segment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteSegmentResponse:
        """
        Delete specified document segment

        Parameters
        ----------
        dataset_id : str
            Knowledge Base ID

        document_id : str
            Document ID

        segment_id : str
            Segment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSegmentResponse
            Successfully deleted segment

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.segments.delete_segment(
                dataset_id="dataset_id",
                document_id="document_id",
                segment_id="segment_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/{jsonable_encoder(document_id)}/segments/{jsonable_encoder(segment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteSegmentResponse,
                    parse_obj_as(
                        type_=DeleteSegmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
