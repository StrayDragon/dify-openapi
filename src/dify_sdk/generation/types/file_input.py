# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .file_input_transfer_method import FileInputTransferMethod
from .file_input_type import FileInputType


class FileInput(UniversalBaseModel):
    type: typing.Optional[FileInputType] = pydantic.Field(default=None)
    """
    File type:
    - document: Document types (txt, md, markdown, pdf, html, xlsx, xls, docx, csv, eml, msg, pptx, ppt, xml, epub)
    - image: Image types (png, jpg, jpeg, webp, gif)
    - audio: Audio types (mp3, m4a, wav, webm, amr)
    - video: Video types (mp4, mov, mpeg, mpga)
    - custom: Custom types
    """

    transfer_method: typing.Optional[FileInputTransferMethod] = pydantic.Field(default=None)
    """
    Transfer method
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    File URL (only when transfer method is remote_url)
    """

    upload_file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Upload file ID (only when transfer method is local_file)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
