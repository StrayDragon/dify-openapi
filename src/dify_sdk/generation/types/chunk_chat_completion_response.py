# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .chunk_chat_completion_response_event import ChunkChatCompletionResponseEvent
from .chunk_chat_completion_response_metadata import ChunkChatCompletionResponseMetadata


class ChunkChatCompletionResponse(UniversalBaseModel):
    event: typing.Optional[ChunkChatCompletionResponseEvent] = pydantic.Field(default=None)
    """
    Event type
    """

    task_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task ID
    """

    message_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique message ID
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response content
    """

    audio: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice synthesis audio data (base64 encoded)
    """

    metadata: typing.Optional[ChunkChatCompletionResponseMetadata] = None
    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    status: typing.Optional[int] = pydantic.Field(default=None)
    """
    HTTP status code
    """

    code: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error code
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
