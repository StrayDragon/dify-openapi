# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawGenerationClient, RawGenerationClient
from .types.chunk_chat_completion_response import ChunkChatCompletionResponse
from .types.configure_annotation_reply_by_app_generation_request_action import (
    ConfigureAnnotationReplyByAppGenerationRequestAction,
)
from .types.configure_annotation_reply_by_app_generation_response import ConfigureAnnotationReplyByAppGenerationResponse
from .types.create_annotation_by_app_generation_response import CreateAnnotationByAppGenerationResponse
from .types.delete_annotation_by_app_generation_response import DeleteAnnotationByAppGenerationResponse
from .types.file_input import FileInput
from .types.get_annotation_reply_status_by_app_generation_request_action import (
    GetAnnotationReplyStatusByAppGenerationRequestAction,
)
from .types.get_annotation_reply_status_by_app_generation_response import (
    GetAnnotationReplyStatusByAppGenerationResponse,
)
from .types.get_annotations_list_by_app_generation_response import GetAnnotationsListByAppGenerationResponse
from .types.get_app_meta_info_by_app_generation_response import GetAppMetaInfoByAppGenerationResponse
from .types.get_application_info_by_app_generation_response import GetApplicationInfoByAppGenerationResponse
from .types.get_application_parameters_by_app_generation_response import GetApplicationParametersByAppGenerationResponse
from .types.send_completion_message_by_app_generation_request_inputs import (
    SendCompletionMessageByAppGenerationRequestInputs,
)
from .types.send_completion_message_by_app_generation_request_response_mode import (
    SendCompletionMessageByAppGenerationRequestResponseMode,
)
from .types.send_message_feedback_by_app_generation_response import SendMessageFeedbackByAppGenerationResponse
from .types.stop_completion_response_by_app_generation_response import StopCompletionResponseByAppGenerationResponse
from .types.update_annotation_by_app_generation_response import UpdateAnnotationByAppGenerationResponse
from .types.uploaded_file import UploadedFile

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GenerationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGenerationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGenerationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGenerationClient
        """
        return self._raw_client

    def send_completion_message_by_app_generation(
        self,
        *,
        inputs: SendCompletionMessageByAppGenerationRequestInputs,
        response_mode: typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[ChunkChatCompletionResponse]:
        """
        Send request to text generation application

        Parameters
        ----------
        inputs : SendCompletionMessageByAppGenerationRequestInputs

        response_mode : typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        files : typing.Optional[typing.Sequence[FileInput]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import DifyApi
        from dify.generation import SendCompletionMessageByAppGenerationRequestInputs
        client = DifyApi(token="YOUR_TOKEN", )
        response = client.generation.send_completion_message_by_app_generation(inputs=SendCompletionMessageByAppGenerationRequestInputs(query='query', ), )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.send_completion_message_by_app_generation(
            inputs=inputs, response_mode=response_mode, user=user, files=files, request_options=request_options
        ) as r:
            yield from r.data

    def upload_file_by_app_generation(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.upload_file_by_app_generation()
        """
        _response = self._raw_client.upload_file_by_app_generation(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    def get_application_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.get_application_info_by_app_generation()
        """
        _response = self._raw_client.get_application_info_by_app_generation(request_options=request_options)
        return _response.data

    def get_application_parameters_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.get_application_parameters_by_app_generation()
        """
        _response = self._raw_client.get_application_parameters_by_app_generation(request_options=request_options)
        return _response.data

    def stop_completion_response_by_app_generation(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopCompletionResponseByAppGenerationResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopCompletionResponseByAppGenerationResponse
            Successfully stopped the response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.stop_completion_response_by_app_generation(task_id='task_id', user='user', )
        """
        _response = self._raw_client.stop_completion_response_by_app_generation(
            task_id, user=user, request_options=request_options
        )
        return _response.data

    def send_message_feedback_by_app_generation(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppGenerationResponse:
        """
        End user feedback for messages, helps application developers optimize output expectations

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like (like), dislike (dislike), or cancel rating (null)

        user : str
            User identifier, defined by developer rules, must be unique within the application

        content : typing.Optional[str]
            Specific feedback information

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.send_message_feedback_by_app_generation(message_id='message_id', rating='rating', user='user', )
        """
        _response = self._raw_client.send_message_feedback_by_app_generation(
            message_id, rating=rating, user=user, content=content, request_options=request_options
        )
        return _response.data

    def convert_text_to_audio_by_app_generation(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        streaming: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        streaming : typing.Optional[bool]
            Whether to use streaming mode to return audio data

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful response
        """
        with self._raw_client.convert_text_to_audio_by_app_generation(
            message_id=message_id, text=text, user=user, streaming=streaming, request_options=request_options
        ) as r:
            yield from r.data

    def get_annotations_list_by_app_generation(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppGenerationResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppGenerationResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.get_annotations_list_by_app_generation()
        """
        _response = self._raw_client.get_annotations_list_by_app_generation(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_annotation_by_app_generation(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppGenerationResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppGenerationResponse
            Successfully created annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.create_annotation_by_app_generation(question='question', answer='answer', )
        """
        _response = self._raw_client.create_annotation_by_app_generation(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def update_annotation_by_app_generation(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppGenerationResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppGenerationResponse
            Successfully updated annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.update_annotation_by_app_generation(annotation_id='annotation_id', question='question', answer='answer', )
        """
        _response = self._raw_client.update_annotation_by_app_generation(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    def delete_annotation_by_app_generation(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAnnotationByAppGenerationResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppGenerationResponse
            Successfully deleted annotation

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.delete_annotation_by_app_generation(annotation_id='annotation_id', )
        """
        _response = self._raw_client.delete_annotation_by_app_generation(annotation_id, request_options=request_options)
        return _response.data

    def configure_annotation_reply_by_app_generation(
        self,
        action: ConfigureAnnotationReplyByAppGenerationRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppGenerationResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppGenerationResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.configure_annotation_reply_by_app_generation(action="enable", )
        """
        _response = self._raw_client.configure_annotation_reply_by_app_generation(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    def get_annotation_reply_status_by_app_generation(
        self,
        action: GetAnnotationReplyStatusByAppGenerationRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppGenerationResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppGenerationResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.get_annotation_reply_status_by_app_generation(action="enable", job_id='job_id', )
        """
        _response = self._raw_client.get_annotation_reply_status_by_app_generation(
            action, job_id, request_options=request_options
        )
        return _response.data

    def get_app_meta_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppGenerationResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi
        client = DifyApi(token="YOUR_TOKEN", )
        client.generation.get_app_meta_info_by_app_generation()
        """
        _response = self._raw_client.get_app_meta_info_by_app_generation(request_options=request_options)
        return _response.data


class AsyncGenerationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGenerationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGenerationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGenerationClient
        """
        return self._raw_client

    async def send_completion_message_by_app_generation(
        self,
        *,
        inputs: SendCompletionMessageByAppGenerationRequestInputs,
        response_mode: typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[ChunkChatCompletionResponse]:
        """
        Send request to text generation application

        Parameters
        ----------
        inputs : SendCompletionMessageByAppGenerationRequestInputs

        response_mode : typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        files : typing.Optional[typing.Sequence[FileInput]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[ChunkChatCompletionResponse]
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        from dify.generation import SendCompletionMessageByAppGenerationRequestInputs
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            response = await client.generation.send_completion_message_by_app_generation(inputs=SendCompletionMessageByAppGenerationRequestInputs(query='query', ), )
            async for chunk in response:
                yield chunk
        asyncio.run(main())
        """
        async with self._raw_client.send_completion_message_by_app_generation(
            inputs=inputs, response_mode=response_mode, user=user, files=files, request_options=request_options
        ) as r:
            async for data in r.data:
                yield data

    async def upload_file_by_app_generation(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.upload_file_by_app_generation()
        asyncio.run(main())
        """
        _response = await self._raw_client.upload_file_by_app_generation(
            file=file, user=user, request_options=request_options
        )
        return _response.data

    async def get_application_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.get_application_info_by_app_generation()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_info_by_app_generation(request_options=request_options)
        return _response.data

    async def get_application_parameters_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.get_application_parameters_by_app_generation()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_application_parameters_by_app_generation(request_options=request_options)
        return _response.data

    async def stop_completion_response_by_app_generation(
        self, task_id: str, *, user: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StopCompletionResponseByAppGenerationResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopCompletionResponseByAppGenerationResponse
            Successfully stopped the response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.stop_completion_response_by_app_generation(task_id='task_id', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.stop_completion_response_by_app_generation(
            task_id, user=user, request_options=request_options
        )
        return _response.data

    async def send_message_feedback_by_app_generation(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppGenerationResponse:
        """
        End user feedback for messages, helps application developers optimize output expectations

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like (like), dislike (dislike), or cancel rating (null)

        user : str
            User identifier, defined by developer rules, must be unique within the application

        content : typing.Optional[str]
            Specific feedback information

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.send_message_feedback_by_app_generation(message_id='message_id', rating='rating', user='user', )
        asyncio.run(main())
        """
        _response = await self._raw_client.send_message_feedback_by_app_generation(
            message_id, rating=rating, user=user, content=content, request_options=request_options
        )
        return _response.data

    async def convert_text_to_audio_by_app_generation(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        streaming: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        streaming : typing.Optional[bool]
            Whether to use streaming mode to return audio data

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful response
        """
        async with self._raw_client.convert_text_to_audio_by_app_generation(
            message_id=message_id, text=text, user=user, streaming=streaming, request_options=request_options
        ) as r:
            async for data in r.data:
                yield data

    async def get_annotations_list_by_app_generation(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppGenerationResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppGenerationResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.get_annotations_list_by_app_generation()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotations_list_by_app_generation(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_annotation_by_app_generation(
        self, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateAnnotationByAppGenerationResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppGenerationResponse
            Successfully created annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.create_annotation_by_app_generation(question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_annotation_by_app_generation(
            question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def update_annotation_by_app_generation(
        self, annotation_id: str, *, question: str, answer: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateAnnotationByAppGenerationResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppGenerationResponse
            Successfully updated annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.update_annotation_by_app_generation(annotation_id='annotation_id', question='question', answer='answer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_annotation_by_app_generation(
            annotation_id, question=question, answer=answer, request_options=request_options
        )
        return _response.data

    async def delete_annotation_by_app_generation(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAnnotationByAppGenerationResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppGenerationResponse
            Successfully deleted annotation

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.delete_annotation_by_app_generation(annotation_id='annotation_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_annotation_by_app_generation(
            annotation_id, request_options=request_options
        )
        return _response.data

    async def configure_annotation_reply_by_app_generation(
        self,
        action: ConfigureAnnotationReplyByAppGenerationRequestAction,
        *,
        embedding_provider_name: typing.Optional[str] = OMIT,
        embedding_model_name: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppGenerationResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_provider_name : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model_name : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppGenerationResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.configure_annotation_reply_by_app_generation(action="enable", )
        asyncio.run(main())
        """
        _response = await self._raw_client.configure_annotation_reply_by_app_generation(
            action,
            embedding_provider_name=embedding_provider_name,
            embedding_model_name=embedding_model_name,
            score_threshold=score_threshold,
            request_options=request_options,
        )
        return _response.data

    async def get_annotation_reply_status_by_app_generation(
        self,
        action: GetAnnotationReplyStatusByAppGenerationRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppGenerationResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppGenerationResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.get_annotation_reply_status_by_app_generation(action="enable", job_id='job_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_annotation_reply_status_by_app_generation(
            action, job_id, request_options=request_options
        )
        return _response.data

    async def get_app_meta_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppGenerationResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import AsyncDifyApi
        import asyncio
        client = AsyncDifyApi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.generation.get_app_meta_info_by_app_generation()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_app_meta_info_by_app_generation(request_options=request_options)
        return _response.data
