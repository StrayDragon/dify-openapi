overlay: 1.0.0
info:
  title: "English translation overlay for Dify Knowledge Base API"
  version: "1.7.2"
extends: ../knowledge_base.zh.yaml
actions:
  - target: $.info
    update:
      title: "Dify Knowledge Base API"
      description: |
        Dify Knowledge Base API provides a series of interfaces for managing knowledge bases, documents, and retrieval functions.
        All API requests require a knowledge base level API-Key in the Authorization HTTP Header.

  - target: $.servers[0]
    update:
      description: "Dify API Server"

  - target: $.servers[1].variables.api_url
    update:
      description: "Custom API server URL"

  - target: $.components.schemas.Error.properties.code
    update:
      description: "Error code"

  - target: $.components.schemas.Error.properties.status
    update:
      description: "HTTP status code"

  - target: $.components.schemas.Error.properties.message
    update:
      description: "Error message description"

  - target: $.components.schemas.Dataset.properties.id
    update:
      description: "Knowledge Base ID"

  - target: $.components.schemas.Dataset.properties.name
    update:
      description: "Knowledge Base name"

  - target: $.components.schemas.Dataset.properties.description
    update:
      description: "Knowledge Base description"

  - target: $.components.schemas.Dataset.properties.provider
    update:
      description: "Knowledge Base provider"

  - target: $.components.schemas.Dataset.properties.permission
    update:
      description: "Access permission"

  - target: $.components.schemas.Dataset.properties.data_source_type
    update:
      description: "Data source type"

  - target: $.components.schemas.Dataset.properties.indexing_technique
    update:
      description: "Indexing technique"

  - target: $.components.schemas.Dataset.properties.app_count
    update:
      description: "Number of applications"

  - target: $.components.schemas.Dataset.properties.document_count
    update:
      description: "Number of documents"

  - target: $.components.schemas.Dataset.properties.word_count
    update:
      description: "Word count"

  - target: $.components.schemas.Dataset.properties.created_by
    update:
      description: "Creator ID"

  - target: $.components.schemas.Dataset.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.Dataset.properties.updated_by
    update:
      description: "Last updated by ID"

  - target: $.components.schemas.Dataset.properties.updated_at
    update:
      description: "Last updated timestamp"

  - target: $.components.schemas.Dataset.properties.embedding_model
    update:
      description: "Embedding model name"

  - target: $.components.schemas.Dataset.properties.embedding_model_provider
    update:
      description: "Embedding model provider"

  - target: $.components.schemas.Dataset.properties.embedding_available
    update:
      description: "Whether embedding is available"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict
    update:
      description: "Retrieval model configuration"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.search_method
    update:
      description: "Search method"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.reranking_enable
    update:
      description: "Whether reranking is enabled"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.reranking_mode
    update:
      description: "Reranking mode"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.reranking_model
    update:
      description: "Reranking model"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.reranking_model.properties.reranking_provider_name
    update:
      description: "Reranking model provider"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.reranking_model.properties.reranking_model_name
    update:
      description: "Reranking model name"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.weights
    update:
      description: "Weights"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.top_k
    update:
      description: "Number of results to return"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.score_threshold_enabled
    update:
      description: "Whether score threshold is enabled"

  - target: $.components.schemas.Dataset.properties.retrieval_model_dict.properties.score_threshold
    update:
      description: "Score threshold"

  - target: $.components.schemas.Dataset.properties.tags
    update:
      description: "Tags list"

  - target: $.components.schemas.Dataset.properties.doc_form
    update:
      description: "Document form"

  - target: $.components.schemas.Dataset.properties.external_knowledge_info
    update:
      description: "External knowledge information"

  - target: $.components.schemas.Dataset.properties.external_knowledge_info.properties.external_knowledge_id
    update:
      description: "External knowledge ID"

  - target: $.components.schemas.Dataset.properties.external_knowledge_info.properties.external_knowledge_api_id
    update:
      description: "External knowledge API ID"

  - target: $.components.schemas.Dataset.properties.external_knowledge_info.properties.external_knowledge_api_name
    update:
      description: "External knowledge API name"

  - target: $.components.schemas.Dataset.properties.external_knowledge_info.properties.external_knowledge_api_endpoint
    update:
      description: "External knowledge API endpoint"

  - target: $.components.schemas.Dataset.properties.external_retrieval_model
    update:
      description: "External retrieval model"

  - target: $.components.schemas.Dataset.properties.external_retrieval_model.properties.top_k
    update:
      description: "Number of results to return"

  - target: $.components.schemas.Dataset.properties.external_retrieval_model.properties.score_threshold
    update:
      description: "Score threshold"

  - target: $.components.schemas.Dataset.properties.external_retrieval_model.properties.score_threshold_enabled
    update:
      description: "Whether score threshold is enabled"

  - target: $.components.schemas.DatasetList.properties.has_more
    update:
      description: "Whether there is more data"

  - target: $.components.schemas.DatasetList.properties.limit
    update:
      description: "Page size limit"

  - target: $.components.schemas.DatasetList.properties.total
    update:
      description: "Total record count"

  - target: $.components.schemas.DatasetList.properties.page
    update:
      description: "Current page number"

  - target: $.components.schemas.CreateDatasetRequest.properties.name
    update:
      description: "Knowledge Base name (required)"

  - target: $.components.schemas.CreateDatasetRequest.properties.description
    update:
      description: "Knowledge Base description (optional)"

  - target: $.components.schemas.CreateDatasetRequest.properties.indexing_technique
    update:
      description: |
        Indexing mode (optional, recommended)
        - high_quality: High quality
        - economy: Economy

  - target: $.components.schemas.CreateDatasetRequest.properties.permission
    update:
      description: |
        Permission (optional, default only_me)
        - only_me: Only me
        - all_team_members: All team members
        - partial_members: Partial team members

  - target: $.components.schemas.CreateDatasetRequest.properties.provider
    update:
      description: |
        Provider (optional, default vendor)
        - vendor: Upload files
        - external: External knowledge base

  - target: $.components.schemas.CreateDatasetRequest.properties.external_knowledge_api_id
    update:
      description: "External knowledge API_ID (optional)"

  - target: $.components.schemas.CreateDatasetRequest.properties.external_knowledge_id
    update:
      description: "External knowledge ID (optional)"

  - target: $.components.schemas.CreateDatasetRequest.properties.embedding_model
    update:
      description: "Embedding model name"

  - target: $.components.schemas.CreateDatasetRequest.properties.embedding_model_provider
    update:
      description: "Embedding model provider"

  - target: $.components.schemas.CreateDatasetRequest.properties.retrieval_model
    update:
      description: "Retrieval model configuration"

  - target: $.components.schemas.RetrievalModel.properties.search_method
    update:
      description: |
        Search method:
        - keyword_search: Keyword search
        - semantic_search: Semantic search
        - full_text_search: Full-text search
        - hybrid_search: Hybrid search

  - target: $.components.schemas.RetrievalModel.properties.reranking_enable
    update:
      description: "Whether reranking is enabled (optional). Required if search mode is semantic_search or hybrid_search"

  - target: $.components.schemas.RetrievalModel.properties.reranking_mode
    update:
      description: |
        Rerank mode
        - weighted_score: Weight setting
        - reranking_model: Rerank model

  - target: $.components.schemas.RetrievalModel.properties.reranking_model
    update:
      description: "Rerank model configuration (optional). Required if reranking is enabled"

  - target: $.components.schemas.RetrievalModel.properties.reranking_model.properties.reranking_provider_name
    update:
      description: "Rerank model provider"

  - target: $.components.schemas.RetrievalModel.properties.reranking_model.properties.reranking_model_name
    update:
      description: "Rerank model name"

  - target: $.components.schemas.RetrievalModel.properties.weights
    update:
      description: "Weight setting for semantic search in hybrid search mode"

  - target: $.components.schemas.RetrievalModel.properties.top_k
    update:
      description: "Number of results to return (optional)"

  - target: $.components.schemas.RetrievalModel.properties.score_threshold_enabled
    update:
      description: "Whether score threshold is enabled"

  - target: $.components.schemas.RetrievalModel.properties.score_threshold
    update:
      description: "Score threshold"

  - target: $.components.schemas.RetrievalModel.properties.metadata_filtering_conditions
    update:
      description: "Metadata filtering conditions"

  - target: $.components.schemas.ProcessRule.properties.mode
    update:
      description: "Cleaning and segmentation mode"

  - target: $.components.schemas.ProcessRule.properties.rules
    update:
      description: "Custom rules (empty for automatic mode)"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.pre_processing_rules
    update:
      description: "Pre-processing rules"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.pre_processing_rules.items
    update:
      description: "Pre-processing rules list"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.pre_processing_rules.items.properties.id
    update:
      description: "Unique identifier for preprocessing rule"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.pre_processing_rules.items.properties.enabled
    update:
      description: "Whether this rule is selected"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.segmentation
    update:
      description: "Segmentation configuration"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.segmentation.properties.separator
    update:
      description: "Custom segmentation identifier"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.segmentation.properties.max_tokens
    update:
      description: "Maximum length (tokens)"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.segmentation.properties.chunk_overlap
    update:
      description: "Segment overlap"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.parent_mode
    update:
      description: |
        Parent segment recall mode
        - full-doc: Full document recall
        - paragraph: Paragraph recall

  - target: $.components.schemas.ProcessRule.properties.rules.properties.subchunk_segmentation
    update:
      description: "Sub-chunk segmentation rules"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.subchunk_segmentation.properties.separator
    update:
      description: "Segmentation identifier, only one separator is allowed. Default is ***"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.subchunk_segmentation.properties.max_tokens
    update:
      description: "Maximum length (tokens), must be less than parent level"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.subchunk_segmentation.properties.chunk_overlap
    update:
      description: "Segment overlap refers to a certain overlap between segments when segmenting data (optional)"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.pre_processing_rules.items.properties.name
    update:
      description: "Rule name"

  - target: $.components.schemas.Document.properties.id
    update:
      description: "Document ID"

  - target: $.components.schemas.Document.properties.data_source_type
    update:
      description: "Data source type"

  - target: $.components.schemas.Document.properties.name
    update:
      description: "Document name"

  - target: $.components.schemas.Document.properties.created_from
    update:
      description: "Created from"

  - target: $.components.schemas.Document.properties.created_by
    update:
      description: "Creator ID"

  - target: $.components.schemas.Document.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.Document.properties.enabled
    update:
      description: "Whether enabled"

  - target: $.components.schemas.Document.properties.updated_at
    update:
      description: "Last updated timestamp"

  - target: $.components.schemas.Document.properties.archived
    update:
      description: "Whether archived"

  - target: $.components.schemas.Document.properties.display_status
    update:
      description: "Display status"

  - target: $.components.schemas.Document.properties.word_count
    update:
      description: "Word count"

  - target: $.components.schemas.Document.properties.hit_count
    update:
      description: "Hit count"

  - target: $.components.schemas.Document.properties.dataset_id
    update:
      description: "Associated knowledge base ID"

  - target: $.components.schemas.Document.properties.segment_count
    update:
      description: "Number of segments"

  - target: $.components.schemas.Document.properties.batch
    update:
      description: "Batch number"

  - target: $.components.schemas.Segment.properties.id
    update:
      description: "Segment ID"

  - target: $.components.schemas.Segment.properties.position
    update:
      description: "Position"

  - target: $.components.schemas.Segment.properties.document_id
    update:
      description: "Document ID"

  - target: $.components.schemas.Segment.properties.content
    update:
      description: "Content"

  - target: $.components.schemas.Segment.properties.answer
    update:
      description: "Answer"

  - target: $.components.schemas.Segment.properties.word_count
    update:
      description: "Word count"

  - target: $.components.schemas.Segment.properties.tokens
    update:
      description: "Token count"

  - target: $.components.schemas.Segment.properties.keywords
    update:
      description: "Keywords"

  - target: $.components.schemas.Segment.properties.index_node_id
    update:
      description: "Index node ID"

  - target: $.components.schemas.Segment.properties.index_node_hash
    update:
      description: "Index node hash"

  - target: $.components.schemas.Segment.properties.hit_count
    update:
      description: "Hit count"

  - target: $.components.schemas.Segment.properties.enabled
    update:
      description: "Whether enabled"

  - target: $.components.schemas.Segment.properties.disabled_at
    update:
      description: "Disabled timestamp"

  - target: $.components.schemas.Segment.properties.disabled_by
    update:
      description: "Disabled by user ID"

  - target: $.components.schemas.Segment.properties.status
    update:
      description: "Status"

  - target: $.components.schemas.Segment.properties.created_by
    update:
      description: "Creator ID"

  - target: $.components.schemas.Segment.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.Segment.properties.indexing_at
    update:
      description: "Indexing timestamp"

  - target: $.components.schemas.Segment.properties.completed_at
    update:
      description: "Completion timestamp"

  - target: $.components.schemas.Segment.properties.error
    update:
      description: "Error message"

  - target: $.components.schemas.Segment.properties.stopped_at
    update:
      description: "Stop timestamp"

  - target: $.components.schemas.UploadFile.properties.id
    update:
      description: "File ID"

  - target: $.components.schemas.UploadFile.properties.name
    update:
      description: "File name"

  - target: $.components.schemas.UploadFile.properties.size
    update:
      description: "File size"

  - target: $.components.schemas.UploadFile.properties.extension
    update:
      description: "File extension"

  - target: $.components.schemas.UploadFile.properties.url
    update:
      description: "Preview URL"

  - target: $.components.schemas.UploadFile.properties.download_url
    update:
      description: "Download URL"

  - target: $.components.schemas.UploadFile.properties.mime_type
    update:
      description: "MIME type"

  - target: $.components.schemas.UploadFile.properties.created_by
    update:
      description: "Creator ID"

  - target: $.components.schemas.UploadFile.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.CreateDocumentByFileRequestData
    update:
      description: |
        Document configuration information in JSON string format, including the following fields:
        - original_document_id: Source document ID (optional), used for re-uploading or modifying document configuration
        - indexing_technique: Indexing method (high_quality/economy)
        - doc_form: Indexing content form (text_model/hierarchical_model/qa_model)
        - doc_language: Document language (required for Q&A mode)
        - process_rule: Processing rules

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.original_document_id
    update:
      description: "Source document ID, used for re-uploading or modifying document configuration"

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.indexing_technique
    update:
      description: |
        Indexing technique
        - high_quality: High quality: Use Embedding model for embedding, build as vector database index
        - economy: Economy: Build using keyword table index inverted index

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.doc_form
    update:
      description: |
        Document form
        - text_model: Direct text document embedding, default mode for economy
        - hierarchical_model: Parent-child mode
        - qa_model: Q&A mode: Generate Q&A pairs for segmented documents, then embed questions

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.doc_language
    update:
      description: "In Q&A mode, specify the document language, e.g.: English, Chinese"

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.process_rule
    update:
      description: "Processing rules"

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.retrieval_model
    update:
      description: "Retrieval model configuration"

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.embedding_model
    update:
      description: "Embedding model name"

  - target: $.components.schemas.CreateDocumentByFileRequestData.properties.embedding_model_provider
    update:
      description: "Embedding model provider"

  - target: $.paths['/datasets'].post
    update:
      summary: "Create Empty Knowledge Base"
      description: "Create a new empty knowledge base"

  - target: $.paths['/datasets'].get
    update:
      summary: "Get Knowledge Base List"
      description: "Get a list of all knowledge bases"

  - target: $.paths['/datasets/{dataset_id}'].get
    update:
      summary: "View Knowledge Base Details"
      description: "Get detailed information about a specific knowledge base"

  - target: $.paths['/datasets/{dataset_id}'].get.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}'].get.responses['200'].description
    update: "Successfully retrieved knowledge base details"

  - target: $.paths['/datasets/{dataset_id}'].patch
    update:
      summary: "Update Knowledge Base Details"
      description: "Modify details of a specific knowledge base"

  - target: $.paths['/datasets/{dataset_id}'].patch.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.name.description
    update: "Knowledge Base name (optional)"

  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.indexing_technique.description
    update: |
      Indexing mode (optional, recommended)
      - high_quality: High quality
      - economy: Economy

  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.permission.description
    update: |
      Permission (optional, default only_me)
      - only_me: Only me
      - all_team_members: All team members
      - partial_members: Partial team members

  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.embedding_model_provider.description
    update: "Embedding model provider (optional), must be configured in the system first, corresponds to the provider field"

  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.embedding_model.description
    update: "Embedding model (optional)"



  - target: $.paths['/datasets/{dataset_id}'].patch.requestBody.content['application/json'].schema.properties.partial_member_list.description
    update: "Partial team members ID list (optional)"

  - target: $.paths['/datasets/{dataset_id}'].patch.responses['200'].description
    update: "Successfully updated knowledge base details"

  - target: $.paths['/datasets/{dataset_id}'].delete
    update:
      summary: "Delete Knowledge Base"
      description: "Delete specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post
    update:
      summary: "Retrieve Knowledge Base"
      description: "Retrieve content from specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post
    update:
      summary: "Create Document by Text"
      description: "Create a new document from text based on existing knowledge base"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post
    update:
      summary: "Create Document by File"
      description: "Create a new document from file based on existing knowledge base"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post
    update:
      summary: "Update Document by Text"
      description: "Update existing document using text"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post
    update:
      summary: "Update Document by File"
      description: "Update existing document using file"

  - target: $.paths['/datasets/{dataset_id}/documents/{batch}/indexing-status'].get
    update:
      summary: "Get Document Embedding Status"
      description: "Get document processing and indexing progress status"

  - target: $.paths['/datasets/{dataset_id}/documents'].get
    update:
      summary: "Get Knowledge Base Document List"
      description: "Get a list of all documents in the specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].delete
    update:
      summary: "Delete Document"
      description: "Delete specified document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post
    update:
      summary: "Add Segment"
      description: "Add a new segment to specified document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get
    update:
      summary: "Query Document Segments"
      description: "Get all segments of specified document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].delete
    update:
      summary: "Delete Document Segment"
      description: "Delete specified document segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post
    update:
      summary: "Create Document Child Segment"
      description: "Add a new child segment to a specified segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post.parameters[2].description
    update: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post.requestBody.content['application/json'].schema.properties.content.description
    update: "Child segment content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].post.responses['200'].description
    update: "Successfully created child segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get
    update:
      summary: "Query Document Child Segments"
      description: "Get all child segments of a specified segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[2].description
    update: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[3].description
    update: "Search keyword (optional)"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[4].description
    update: "Page number (optional, default 1)"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.parameters[5].description
    update: "Items per page (optional, default 20, max 100)"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.responses['200'].description
    update: "Successfully retrieved child segment list"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.responses['200'].content['application/json'].schema.properties.total.description
    update: "Total record count"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.responses['200'].content['application/json'].schema.properties.total_pages.description
    update: "Total pages"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.responses['200'].content['application/json'].schema.properties.page.description
    update: "Current page number"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks'].get.responses['200'].content['application/json'].schema.properties.limit.description
    update: "Items per page"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete
    update:
      summary: "Delete Document Child Segment"
      description: "Delete a specified document child segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete.responses['204'].description
    update: "Successfully deleted child segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete.parameters[2].description
    update: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].delete.parameters[3].description
    update: "Child Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch
    update:
      summary: "Update Document Child Segment"
      description: "Update a specified document child segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.responses['200'].description
    update: "Successfully updated child segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.parameters[2].description
    update: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.parameters[3].description
    update: "Child Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}'].patch.requestBody.content['application/json'].schema.properties.content.description
    update: "Child segment content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post
    update:
      summary: "Update Document Segment"
      description: "Update specified document segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/upload-file'].get
    update:
      summary: "Get Upload File"
      description: "Get upload file information of specified document"

  - target: $.paths['/datasets'].get.parameters[0]
    update:
      description: "Page number"

  - target: $.paths['/datasets'].get.parameters[1]
    update:
      description: "Number of items per page"

  - target: $.paths['/datasets/{dataset_id}'].delete.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.requestBody.content['application/json'].schema.properties.query
    update:
      description: "Search keyword"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.requestBody.content['application/json'].schema.properties.retrieval_model
    update:
      description: "Retrieval parameter configuration"



  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.requestBody.content['application/json'].schema.properties.external_retrieval_model
    update:
      description: "Unused field"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.requestBody.content['application/json'].schema.properties.name
    update:
      description: "Document name"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.requestBody.content['application/json'].schema.properties.text
    update:
      description: "Document content"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.requestBody.content['application/json'].schema.properties.indexing_technique
    update:
      description: "Indexing technique"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.requestBody.content['application/json'].schema.properties.doc_form
    update:
      description: "Document form"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.requestBody.content['application/json'].schema.properties.doc_language
    update:
      description: "Document language (required for Q&A mode)"

  - target: $.paths['/datasets'].post.responses['200'].description
    update: "Successfully created knowledge base"

  - target: $.paths['/datasets'].get.responses['200'].description
    update: "Successfully retrieved knowledge base list"

  - target: $.paths['/datasets/{dataset_id}'].delete.responses['204'].description
    update: "Successfully deleted knowledge base"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].description
    update: "Retrieval successful"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.query.properties.content
    update:
      description: "Search keyword"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-text'].post.responses['200'].description
    update: "Successfully created document"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.responses['200'].description
    update: "Successfully created document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.responses['200'].description
    update: "Successfully updated document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post.responses['200'].description
    update: "Successfully updated document"

  - target: $.paths['/datasets/{dataset_id}/documents/{batch}/indexing-status'].get.responses['200'].description
    update: "Successfully retrieved indexing status"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.responses['200'].description
    update: "Successfully retrieved document list"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].delete.responses['204'].description
    update: "Successfully deleted document"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.responses['200'].description
    update: "Successfully created segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.responses['200'].description
    update: "Successfully retrieved segment list"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].delete.responses['204'].description
    update: "Successfully deleted segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.responses['200'].description
    update: "Successfully updated segment"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/upload-file'].get.responses['200'].description
    update: "Successfully retrieved file information"

  - target: $.components.responses.Error400.description
    update: "Request parameter error"

  - target: $.components.responses.Error403.description
    update: "Permission error"

  - target: $.components.responses.Error409.description
    update: "Resource conflict"

  - target: $.components.responses.Error413.description
    update: "Request entity too large"

  - target: $.components.responses.Error415.description
    update: "Unsupported media type"

  - target: $.components.responses.Error400.content['application/json'].examples.no_file_uploaded.value.message
    update: "Please upload your file."

  - target: $.components.responses.Error400.content['application/json'].examples.too_many_files.value.message
    update: "Only one file is allowed."

  - target: $.components.responses.Error400.content['application/json'].examples.dataset_not_initialized.value.message
    update: "The dataset is still being initialized or indexing. Please wait a moment."

  - target: $.components.responses.Error400.content['application/json'].examples.high_quality_dataset_only.value.message
    update: "Current operation only supports 'high-quality' datasets."

  - target: $.components.responses.Error400.content['application/json'].examples.document_already_finished.value.message
    update: "The document has been processed. Please refresh the page or go to the document details."

  - target: $.components.responses.Error400.content['application/json'].examples.document_indexing.value.message
    update: "The document is being processed and cannot be edited."

  - target: $.components.responses.Error400.content['application/json'].examples.invalid_metadata.value.message
    update: "The metadata content is incorrect. Please check and verify."

  - target: $.components.responses.Error403.content['application/json'].examples.archived_document_immutable.value.message
    update: "The archived document is not editable."

  - target: $.components.responses.Error409.content['application/json'].examples.dataset_name_duplicate.value.message
    update: "The dataset name already exists. Please modify your dataset name."

  - target: $.components.responses.Error413.content['application/json'].examples.file_too_large.value.message
    update: "File size exceeded."

  - target: $.components.responses.Error415.content['application/json'].examples.unsupported_file_type.value.message
    update: "File type not allowed."

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.name
    update:
      description: "Document name"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.text
    update:
      description: "Document content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.indexing_technique
    update:
      description: "Indexing technique"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.doc_form
    update:
      description: "Document form"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.doc_language
    update:
      description: "Document language (required for Q&A mode)"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-text'].post.requestBody.content['application/json'].schema.properties.process_rule
    update:
      description: "Processing rules"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.requestBody.content['multipart/form-data'].schema.properties.data
    update:
      description: "Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.requestBody.content['multipart/form-data'].schema.properties.file
    update:
      description: "File to be uploaded"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.responses['200'].description
    update: "Successfully created document"

  - target: $.paths['/datasets/{dataset_id}/document/create-by-file'].post.responses['200'].content['application/json'].schema.properties.batch
    update:
      description: "Document batch number"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].delete.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].delete.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].delete.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].delete.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/upload-file'].get.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/upload-file'].get.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post.requestBody.content['multipart/form-data'].schema.properties.name
    update:
      description: "Document name"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.parameters[0]
    update:
      description: "Search keyword"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.parameters[2]
    update:
      description: "Page number"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.parameters[3]
    update:
      description: "Items per page"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post.requestBody.content['multipart/form-data'].schema.properties.file
    update:
      description: "File to be uploaded"

  - target: $.paths['/datasets/{dataset_id}/documents/{batch}/indexing-status'].get.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{batch}/indexing-status'].get.parameters[1]
    update:
      description: "Document batch number"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents'].get.parameters[1]
    update:
      description: "Search keyword"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.requestBody.content['application/json'].schema.properties.segments.items.properties.content
    update:
      description: "Text content/question content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.requestBody.content['application/json'].schema.properties.segments.items.properties.answer
    update:
      description: "Answer content, optional, required if knowledge base is in Q&A mode"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].post.requestBody.content['application/json'].schema.properties.segments.items.properties.keywords
    update:
      description: "Keyword list, optional"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[0]
    update:
      description: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[1]
    update:
      description: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[2]
    update:
      description: "Search keyword"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[3]
    update:
      description: "Segment status"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[4]
    update:
      description: "Page numbers"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments'].get.parameters[5]
    update:
      description: "Items per page"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].delete.parameters[2]
    update:
      description: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.parameters[2]
    update:
      description: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.requestBody.content['application/json'].schema.properties.segment.properties.content
    update:
      description: "Text content/question content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.requestBody.content['application/json'].schema.properties.segment.properties.answer
    update:
      description: "Answer content (required for Q&A mode)"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.requestBody.content['application/json'].schema.properties.segment.properties.keywords
    update:
      description: "Keyword list"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.requestBody.content['application/json'].schema.properties.segment.properties.enabled
    update:
      description: "Whether enabled"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].post.requestBody.content['application/json'].schema.properties.segment.properties.regenerate_child_chunks
    update:
      description: "Whether to regenerate child segments"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/update-by-file'].post
    update:
      summary: "Update Document by File"
      description: "Update existing document using file"
      operationId: "updateDocumentByFile"
      tags:
        - "Documents"

  - target: $.paths['/datasets/{dataset_id}/metadata'].post
    update:
      summary: Create Metadata
      description: Add a new metadata field to the knowledge base

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.requestBody.content['application/json'].schema.properties.type.description
    update: "Metadata type, e.g. string"

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.requestBody.content['application/json'].schema.properties.name.description
    update: Metadata name

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.responses['200'].description
    update: Successfully created metadata

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.responses['200'].content['application/json'].schema.properties.id.description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.responses['200'].content['application/json'].schema.properties.type.description
    update: Metadata type

  - target: $.paths['/datasets/{dataset_id}/metadata'].post.responses['200'].content['application/json'].schema.properties.name.description
    update: Metadata name

  - target: $.paths['/datasets/{dataset_id}/metadata'].get
    update:
      summary: List Dataset Metadata
      description: Get list of all metadata fields for a knowledge base

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].description
    update: Successfully retrieved metadata list

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.doc_metadata.description
    update: Metadata list

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.doc_metadata.items.properties.id.description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.doc_metadata.items.properties.name.description
    update: Metadata name

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.doc_metadata.items.properties.type.description
    update: Metadata type

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.doc_metadata.items.properties.use_count.description
    update: Usage count

  - target: $.paths['/datasets/{dataset_id}/metadata'].get.responses['200'].content['application/json'].schema.properties.built_in_field_enabled.description
    update: Whether built-in fields are enabled

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch
    update:
      summary: Update Metadata
      description: Update an existing metadata field

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.parameters[1].description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.requestBody.content['application/json'].schema.properties.name.description
    update: New metadata name

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.responses['200'].description
    update: Successfully updated metadata

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.responses['200'].content['application/json'].schema.properties.id.description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.responses['200'].content['application/json'].schema.properties.type.description
    update: Metadata type

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].patch.responses['200'].content['application/json'].schema.properties.name.description
    update: Metadata name

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].delete
    update:
      summary: Delete Metadata
      description: Delete a metadata field

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].delete.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].delete.parameters[1].description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/metadata/{metadata_id}'].delete.responses['204'].description
    update: Successfully deleted metadata

  - target: $.paths['/datasets/{dataset_id}/metadata/built-in/{action}'].post
    update:
      summary: Enable/Disable Built-in Metadata
      description: Enable or disable built-in metadata fields for a knowledge base

  - target: $.paths['/datasets/{dataset_id}/metadata/built-in/{action}'].post.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/metadata/built-in/{action}'].post.parameters[1].description
    update: "Action type, enable or disable"

  - target: $.paths['/datasets/{dataset_id}/metadata/built-in/{action}'].post.responses['204'].description
    update: Successfully enabled/disabled built-in metadata

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post
    update:
      summary: Update Document Metadata
      description: Update metadata for multiple documents in batch

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.parameters[0].description
    update: Knowledge Base ID

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.description
    update: List of document metadata operations

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.document_id.description
    update: Document ID

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.metadata_list.description
    update: List of metadata to update

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.metadata_list.items.properties.id.description
    update: Metadata ID

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.metadata_list.items.properties.type.description
    update: Metadata type

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.metadata_list.items.properties.value.description
    update: Metadata value

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.requestBody.content['application/json'].schema.properties.operation_data.items.properties.metadata_list.items.properties.name.description
    update: Metadata name

  - target: $.paths['/datasets/{dataset_id}/documents/metadata'].post.responses['204'].description
    update: Successfully updated document metadata

  - target: $.components.schemas.UploadDocument.properties.data_source.properties.type
    update:
      description: |
        Document source type
        - upload_file: Upload file
        - notion_import: Notion import
        - notion_sync: Notion sync
        - web_page: Web page
        - web_site: Website
        - notion_page: Notion page
        - github_repository: GitHub repository
        Required, default: upload_file

  - target: $.components.schemas.UploadDocument.properties.data_source.properties.info_list.items.properties.file_id
    update:
      description: "File ID"

  - target: $.components.schemas.DocumentSegment.properties.id
    update:
      description: "Segment ID"

  - target: $.components.schemas.DocumentSegment.properties.document_id
    update:
      description: "Document ID"

  - target: $.components.schemas.DocumentSegment.properties.content
    update:
      description: "Segment content"

  - target: $.components.schemas.DocumentSegment.properties.answer
    update:
      description: "Answer (if mode is Q&A)"

  - target: $.components.schemas.DocumentSegment.properties.word_count
    update:
      description: "Word count"

  - target: $.components.schemas.DocumentSegment.properties.vector
    update:
      description: "Vector data"

  - target: $.components.schemas.DocumentSegment.properties.created_by
    update:
      description: "Creator"

  - target: $.components.schemas.DocumentSegment.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.DocumentSegment.properties.updated_by
    update:
      description: "Last updated by"

  - target: $.components.schemas.DocumentSegment.properties.updated_at
    update:
      description: "Last updated timestamp"

  - target: $.components.schemas.DocumentSegment.properties.status
    update:
      description: "Segment status"

  - target: $.components.schemas.DocumentSegment.properties.indexing_at
    update:
      description: "Indexing timestamp"

  - target: $.components.schemas.DocumentSegment.properties.completed_at
    update:
      description: "Completion timestamp"

  - target: $.components.schemas.DocumentSegment.properties.position
    update:
      description: "Position"

  - target: $.components.schemas.ProcessRule.properties.rules.properties.segmentation.properties.chunk_overlap
    update:
      description: "Segment overlap"

  - target: $.paths['/workspaces/current/models/model-types/text-embedding'].get
    update:
      summary: "Get Embedding Model List"
      description: "Get a list of available embedding models for the current workspace"
      operationId: "getEmbeddingModels"
      responses:
        '200':
          description: "Successfully retrieved embedding model list"
          content:
            application/json:
              schema:
                properties:
                  data:
                    description: "Embedding model list"

  - target: $.components.schemas.ChildChunk.properties.id
    update:
      description: "Child segment ID"

  - target: $.components.schemas.ChildChunk.properties.segment_id
    update:
      description: "Parent segment ID"

  - target: $.components.schemas.ChildChunk.properties.content
    update:
      description: "Child segment content"

  - target: $.components.schemas.ChildChunk.properties.word_count
    update:
      description: "Word count"

  - target: $.components.schemas.ChildChunk.properties.tokens
    update:
      description: "Token count"

  - target: $.components.schemas.ChildChunk.properties.index_node_id
    update:
      description: "Index node ID"

  - target: $.components.schemas.ChildChunk.properties.index_node_hash
    update:
      description: "Index node hash"

  - target: $.components.schemas.ChildChunk.properties.status
    update:
      description: "Status"

  - target: $.components.schemas.ChildChunk.properties.created_by
    update:
      description: "Creator"

  - target: $.components.schemas.ChildChunk.properties.created_at
    update:
      description: "Creation timestamp"

  - target: $.components.schemas.ChildChunk.properties.indexing_at
    update:
      description: "Indexing timestamp"

  - target: $.components.schemas.ChildChunk.properties.completed_at
    update:
      description: "Completion timestamp"

  - target: $.components.schemas.ChildChunk.properties.error
    update:
      description: "Error message"

  - target: $.components.schemas.ChildChunk.properties.stopped_at
    update:
      description: "Stop timestamp"

  - target: $.components.schemas.EmbeddingModel.properties.provider
    update:
      description: "Model provider"

  - target: $.components.schemas.EmbeddingModel.properties.label
    update:
      description: "Model label"

  - target: $.components.schemas.EmbeddingModel.properties.label.properties.zh_Hans
    update:
      description: "Chinese label"

  - target: $.components.schemas.EmbeddingModel.properties.label.properties.en_US
    update:
      description: "English label"

  - target: $.components.schemas.EmbeddingModel.properties.icon_small
    update:
      description: "Small icon"

  - target: $.components.schemas.EmbeddingModel.properties.icon_small.properties.zh_Hans
    update:
      description: "Chinese small icon"

  - target: $.components.schemas.EmbeddingModel.properties.icon_small.properties.en_US
    update:
      description: "English small icon"

  - target: $.components.schemas.EmbeddingModel.properties.icon_large
    update:
      description: "Large icon"

  - target: $.components.schemas.EmbeddingModel.properties.icon_large.properties.zh_Hans
    update:
      description: "Chinese large icon"

  - target: $.components.schemas.EmbeddingModel.properties.icon_large.properties.en_US
    update:
      description: "English large icon"

  - target: $.components.schemas.EmbeddingModel.properties.status
    update:
      description: "Status"

  - target: $.components.schemas.EmbeddingModel.properties.models
    update:
      description: "Model list"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.model
    update:
      description: "Model name"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.label
    update:
      description: "Model label"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.label.properties.zh_Hans
    update:
      description: "Chinese label"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.label.properties.en_US
    update:
      description: "English label"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.model_type
    update:
      description: "Model type"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.features
    update:
      description: "Features"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.fetch_from
    update:
      description: "Fetch source"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.model_properties
    update:
      description: "Model properties"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.model_properties.properties.context_size
    update:
      description: "Context size"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.deprecated
    update:
      description: "Whether deprecated"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.status
    update:
      description: "Status"

  - target: $.components.schemas.EmbeddingModel.properties.models.items.properties.load_balancing_enabled
    update:
      description: "Whether load balancing is enabled"

  - target: $.tags[0]
    update:
      name: Datasets
      description: Operations for managing knowledge bases

  - target: $.tags[1]
    update:
      name: Documents
      description: Operations for managing documents in knowledge bases

  - target: $.tags[2]
    update:
      name: Segments
      description: Operations for managing document segments

  - target: $.tags[3]
    update:
      name: Models
      description: Operations for retrieving model information

  - target: $.tags[4]
    update:
      name: Metadata
      description: Operations for managing metadata in knowledge bases

  - target: $.tags[5]
    update:
      name: Tags
      description: Operations for managing knowledge base tags

  # New GET endpoint for document segment detail
  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.summary
    update: "View Document Segment Detail"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.description
    update: "View the details of a specific document segment in the specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.parameters[2].description
    update: "Segment ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.responses['200'].description
    update: "Successfully retrieved segment details"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.responses['200'].content['application/json'].schema.properties.data.allOf[1].properties.sign_content.description
    update: "Signature content"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.responses['200'].content['application/json'].schema.properties.data.allOf[1].properties.child_chunks.description
    update: "Child segment list"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}'].get.responses['200'].content['application/json'].schema.properties.doc_form.description
    update: "Document form"

  # Metadata filtering conditions schema
  - target: $.components.schemas.MetadataFilteringConditions
    update:
      description: "Metadata filtering conditions"
      properties:
        logical_operator:
          description: "Logical operator"
        conditions:
          description: "List of conditions"

  - target: $.components.schemas.MetadataCondition
    update:
      description: "Single metadata filtering condition"
      properties:
        name:
          description: "Metadata field name"
        comparison_operator:
          description: "Comparison operator"
        value:
          description: "Comparison value"

  # Knowledge base retrieval API
  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.summary
    update: "Retrieve Knowledge Base"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.description
    update: "Retrieve relevant content from the specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.requestBody.content['application/json'].schema.properties.query.description
    update: "Search keywords"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.requestBody.content['application/json'].schema.properties.external_retrieval_model.description
    update: "External retrieval model (disabled field)"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].description
    update: "Successfully retrieved knowledge base"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.query.properties.content.description
    update: "Query content"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.description
    update: "Search result list"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.items.properties.segment.allOf[1].properties.document.properties.id.description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.items.properties.segment.allOf[1].properties.document.properties.data_source_type.description
    update: "Data source type"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.items.properties.segment.allOf[1].properties.document.properties.name.description
    update: "Document name"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.items.properties.score.description
    update: "Relevance score"

  - target: $.paths['/datasets/{dataset_id}/retrieve'].post.responses['200'].content['application/json'].schema.properties.records.items.properties.tsne_position.description
    update: "t-SNE position"

  # Knowledge tag schema
  - target: $.components.schemas.KnowledgeTag
    update:
      properties:
        id:
          description: "Tag ID"
        name:
          description: "Tag name"
        type:
          description: "Tag type"
        binding_count:
          description: "Binding count"

  # Knowledge tag management APIs
  - target: $.paths['/datasets/tags'].post
    update:
      summary: "Create Knowledge Base Tag"
      description: "Create a new knowledge base tag"
      operationId: "createKnowledgeTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 50
                  description: "Tag name, required, maximum length 50"
      responses:
        '200':
          description: "Successfully created tag"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeTag"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/tags'].get
    update:
      summary: "Get Knowledge Base Tags"
      description: "Get all knowledge base tag list"
      operationId: "getKnowledgeTags"
      responses:
        '200':
          description: "Successfully retrieved tag list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KnowledgeTag"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/tags'].patch
    update:
      summary: "Update Knowledge Base Tag Name"
      description: "Update the name of the specified knowledge base tag"
      operationId: "updateKnowledgeTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - tag_id
              properties:
                name:
                  type: string
                  maxLength: 50
                  description: "Updated tag name, required, maximum length 50"
                tag_id:
                  type: string
                  description: "Tag ID, required"
      responses:
        '200':
          description: "Successfully updated tag name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeTag"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/tags'].delete
    update:
      summary: "Delete Knowledge Base Tag"
      description: "Delete the specified knowledge base tag"
      operationId: "deleteKnowledgeTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_id
              properties:
                tag_id:
                  type: string
                  description: "Tag ID, required"
      responses:
        '204':
          description: "Successfully deleted tag"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/tags/binding'].post
    update:
      summary: "Bind Knowledge Base to Tag"
      description: "Bind knowledge base to specified knowledge base tags"
      operationId: "bindDatasetToTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_ids
                - target_id
              properties:
                tag_ids:
                  type: array
                  description: "Tag ID list, required"
                  items:
                    type: string
                target_id:
                  type: string
                  description: "Knowledge Base ID, required"
      responses:
        '204':
          description: "Successfully bound knowledge base to tags"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/tags/unbinding'].post
    update:
      summary: "Unbind Knowledge Base from Tag"
      description: "Remove the binding relationship between knowledge base and specified tag"
      operationId: "unbindDatasetFromTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_id
                - target_id
              properties:
                tag_id:
                  type: string
                  description: "Tag ID, required"
                target_id:
                  type: string
                  description: "Knowledge Base ID, required"
      responses:
        '204':
          description: "Successfully unbound knowledge base from tag"
        '400':
          $ref: "#/components/responses/Error400"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.summary
    update: "Query Knowledge Base Bound Tags"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.description
    update: "Get all tags bound to the specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.responses['200'].description
    update: "Successfully retrieved knowledge base bound tag list"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.responses['200'].content['application/json'].schema.properties.data.items.properties.id.description
    update: "Tag ID"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.responses['200'].content['application/json'].schema.properties.data.items.properties.name.description
    update: "Tag name"

  - target: $.paths['/datasets/{dataset_id}/tags'].get.responses['200'].content['application/json'].schema.properties.total.description
    update: "Total count"

  # Batch update document status API translations
  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.summary
    update: "Update Document Status"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.description
    update: "Batch update the status of documents in the specified knowledge base"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.parameters[1].description
    update: "Action to perform"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.parameters[1].schema.description
    update: |
      Action type:
      - enable: Enable documents
      - disable: Disable documents
      - archive: Archive documents
      - un_archive: Unarchive documents

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.requestBody.content['application/json'].schema.properties.document_ids.description
    update: "List of document IDs"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.responses['200'].description
    update: "Successfully updated document status"

  - target: $.paths['/datasets/{dataset_id}/documents/status/{action}'].patch.responses['200'].content['application/json'].schema.properties.result.description
    update: "Operation result"

  # Get document detail API translations
  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.summary
    update: "Get Document Detail"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.description
    update: "Get document detail"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.parameters[0].description
    update: "Knowledge Base ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.parameters[1].description
    update: "Document ID"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.parameters[2].description
    update: "metadata filter condition"

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.parameters[2].schema.description
    update: |
      Filter conditions:
      - all: Include all information
      - only: Metadata only
      - without: Without metadata

  - target: $.paths['/datasets/{dataset_id}/documents/{document_id}'].get.responses['200'].description
    update: "Successfully retrieved document detail"

  # Document detail schema translations
  - target: $.components.schemas.DocumentDetail.properties.id.description
    update: "Document ID"

  - target: $.components.schemas.DocumentDetail.properties.position.description
    update: "Document position"

  - target: $.components.schemas.DocumentDetail.properties.data_source_type.description
    update: "Data source type"

  - target: $.components.schemas.DocumentDetail.properties.data_source_info.description
    update: "Data source information"

  - target: $.components.schemas.DocumentDetail.properties.data_source_info.properties.upload_file.description
    update: "Upload file information"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule_id.description
    update: "Dataset process rule ID"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.description
    update: "Dataset process rule"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.mode.description
    update: "Process mode"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.description
    update: "Rule details"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.pre_processing_rules.description
    update: "Pre-processing rules list"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.pre_processing_rules.items.properties.id.description
    update: "Rule ID"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.pre_processing_rules.items.properties.enabled.description
    update: "Whether enabled"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.segmentation.description
    update: "Segmentation rules"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.segmentation.properties.separator.description
    update: "Separator"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.segmentation.properties.max_tokens.description
    update: "Maximum tokens"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.segmentation.properties.chunk_overlap.description
    update: "Chunk overlap"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.parent_mode.description
    update: "Parent mode"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.subchunk_segmentation.description
    update: "Sub-chunk segmentation"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.subchunk_segmentation.properties.separator.description
    update: "Separator"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.subchunk_segmentation.properties.max_tokens.description
    update: "Maximum tokens"

  - target: $.components.schemas.DocumentDetail.properties.dataset_process_rule.properties.rules.properties.subchunk_segmentation.properties.chunk_overlap.description
    update: "Chunk overlap"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.description
    update: "Document process rule"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.id.description
    update: "Rule ID"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.dataset_id.description
    update: "Dataset ID"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.mode.description
    update: "Process mode"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.description
    update: "Rule details"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.pre_processing_rules.description
    update: "Pre-processing rules list"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.pre_processing_rules.items.properties.id.description
    update: "Rule ID"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.pre_processing_rules.items.properties.enabled.description
    update: "Whether enabled"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.segmentation.description
    update: "Segmentation rules"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.segmentation.properties.separator.description
    update: "Separator"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.segmentation.properties.max_tokens.description
    update: "Maximum tokens"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.segmentation.properties.chunk_overlap.description
    update: "Chunk overlap"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.parent_mode.description
    update: "Parent mode"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.subchunk_segmentation.description
    update: "Sub-chunk segmentation"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.subchunk_segmentation.properties.separator.description
    update: "Separator"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.subchunk_segmentation.properties.max_tokens.description
    update: "Maximum tokens"

  - target: $.components.schemas.DocumentDetail.properties.document_process_rule.properties.rules.properties.subchunk_segmentation.properties.chunk_overlap.description
    update: "Chunk overlap"

  - target: $.components.schemas.DocumentDetail.properties.name.description
    update: "Document name"

  - target: $.components.schemas.DocumentDetail.properties.created_from.description
    update: "Creation source"

  - target: $.components.schemas.DocumentDetail.properties.created_by.description
    update: "Creator"

  - target: $.components.schemas.DocumentDetail.properties.created_at.description
    update: "Creation timestamp"

  - target: $.components.schemas.DocumentDetail.properties.tokens.description
    update: "Token count"

  - target: $.components.schemas.DocumentDetail.properties.indexing_status.description
    update: "Indexing status"

  - target: $.components.schemas.DocumentDetail.properties.completed_at.description
    update: "Completion timestamp"

  - target: $.components.schemas.DocumentDetail.properties.updated_at.description
    update: "Update timestamp"

  - target: $.components.schemas.DocumentDetail.properties.indexing_latency.description
    update: "Indexing latency"

  - target: $.components.schemas.DocumentDetail.properties.error.description
    update: "Error message"

  - target: $.components.schemas.DocumentDetail.properties.enabled.description
    update: "Whether enabled"

  - target: $.components.schemas.DocumentDetail.properties.disabled_at.description
    update: "Disabled timestamp"

  - target: $.components.schemas.DocumentDetail.properties.disabled_by.description
    update: "Disabled by"

  - target: $.components.schemas.DocumentDetail.properties.archived.description
    update: "Whether archived"

  - target: $.components.schemas.DocumentDetail.properties.segment_count.description
    update: "Segment count"

  - target: $.components.schemas.DocumentDetail.properties.average_segment_length.description
    update: "Average segment length"

  - target: $.components.schemas.DocumentDetail.properties.hit_count.description
    update: "Hit count"

  - target: $.components.schemas.DocumentDetail.properties.display_status.description
    update: "Display status"

  - target: $.components.schemas.DocumentDetail.properties.doc_form.description
    update: "Document form"

  - target: $.components.schemas.DocumentDetail.properties.doc_language.description
    update: "Document language"

  # Error404 response translations
  - target: $.components.responses.Error404.description
    update: "Resource not found"
